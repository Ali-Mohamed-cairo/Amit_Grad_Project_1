
512_GROUP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001da  00800060  000027ce  00002862  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080023a  0080023a  00002a3c  2**0
                  ALLOC
  3 .stab         00004ca4  00000000  00000000  00002a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e2e  00000000  00000000  000076e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000950e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  0000966e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00009824  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  0000b731  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  0000c803  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d834  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000d9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000dc9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e590  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__vector_1>
       8:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__vector_2>
       c:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 33       	cpi	r26, 0x3A	; 58
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e3       	ldi	r26, 0x3A	; 58
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 34       	cpi	r26, 0x4B	; 75
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5e 12 	call	0x24bc	; 0x24bc <main>
      8a:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e2       	ldi	r26, 0x21	; 33
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e2       	ldi	r24, 0x21	; 33
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b6 13 	jmp	0x276c	; 0x276c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e2       	ldi	r22, 0x21	; 33
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 be 13 	jmp	0x277c	; 0x277c <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 b6 13 	jmp	0x276c	; 0x276c <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e7 5d       	subi	r30, 0xD7	; 215
     a0a:	fe 4f       	sbci	r31, 0xFE	; 254
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <M_WDT_Void_WDTInit>:
#define WDTCR_REG      *(volatile u8*)0x41


void M_WDT_Void_WDTInit(void)
{
	SET_BIT(WDTCR_REG,3);
     d6e:	e1 e4       	ldi	r30, 0x41	; 65
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	88 60       	ori	r24, 0x08	; 8
     d76:	80 83       	st	Z, r24

	SET_BIT(WDTCR_REG,2);
     d78:	80 81       	ld	r24, Z
     d7a:	84 60       	ori	r24, 0x04	; 4
     d7c:	80 83       	st	Z, r24
	SET_BIT(WDTCR_REG,1);
     d7e:	80 81       	ld	r24, Z
     d80:	82 60       	ori	r24, 0x02	; 2
     d82:	80 83       	st	Z, r24
	SET_BIT(WDTCR_REG,0);
     d84:	80 81       	ld	r24, Z
     d86:	81 60       	ori	r24, 0x01	; 1
     d88:	80 83       	st	Z, r24

}
     d8a:	08 95       	ret

00000d8c <M_WDT_Void_WDTRefresh>:
void M_WDT_Void_WDTRefresh(void)
{
	asm("WDR");
     d8c:	a8 95       	wdr
}
     d8e:	08 95       	ret

00000d90 <M_UART_Void_UARTInit>:
void M_UART_Void_UARTInit(void)
{
	u8 Local_U8_UCSRC = 0b10000000;

	/* TO SELECT BAUDRATE -> 9600 */
	UBRRL_REG = 103;
     d90:	87 e6       	ldi	r24, 0x67	; 103
     d92:	89 b9       	out	0x09, r24	; 9
	CLR_BIT(Local_U8_UCSRC,UMSEL_BIT);

	/* TO SELECT CHARACTER SIZE -> 8 BITS */
	SET_BIT(Local_U8_UCSRC,UCSZ0_BIT);
	SET_BIT(Local_U8_UCSRC,UCSZ1_BIT);
	CLR_BIT(UCSRB_REG,UCSZ2_BIT);
     d94:	ea e2       	ldi	r30, 0x2A	; 42
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	8b 7f       	andi	r24, 0xFB	; 251
     d9c:	80 83       	st	Z, r24

	UCSRC_REG = Local_U8_UCSRC;
     d9e:	86 e8       	ldi	r24, 0x86	; 134
     da0:	80 bd       	out	0x20, r24	; 32

	/* TO ENABLE RX CIRCUIT */
	SET_BIT(UCSRB_REG,RXEN_BIT);
     da2:	80 81       	ld	r24, Z
     da4:	80 61       	ori	r24, 0x10	; 16
     da6:	80 83       	st	Z, r24

	/* TO ENABLE TX CIRCUIT */
	SET_BIT(UCSRB_REG,TXEN_BIT);
     da8:	80 81       	ld	r24, Z
     daa:	88 60       	ori	r24, 0x08	; 8
     dac:	80 83       	st	Z, r24
}
     dae:	08 95       	ret

00000db0 <M_UART_Void_UARTSend>:
void M_UART_Void_UARTSend(u8 Copy_U8_Data)
{
	UDR_REG = Copy_U8_Data;
     db0:	8c b9       	out	0x0c, r24	; 12
	while(GET_BIT(UCSRA_REG,TXC_BIT) == 0);
     db2:	eb e2       	ldi	r30, 0x2B	; 43
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	86 ff       	sbrs	r24, 6
     dba:	fd cf       	rjmp	.-6      	; 0xdb6 <M_UART_Void_UARTSend+0x6>
}
     dbc:	08 95       	ret

00000dbe <M_UART_Void_UARTRec>:
u8   M_UART_Void_UARTRec(void)
{
	while(GET_BIT(UCSRA_REG,RXC_BIT) == 0);
     dbe:	eb e2       	ldi	r30, 0x2B	; 43
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	88 23       	and	r24, r24
     dc6:	ec f7       	brge	.-6      	; 0xdc2 <M_UART_Void_UARTRec+0x4>
	return UDR_REG;
     dc8:	8c b1       	in	r24, 0x0c	; 12
}
     dca:	08 95       	ret

00000dcc <M_Timer_Void_TimerInit>:
	CLR_BIT(TCCR0_REG,WGM00_BIT);
	SET_BIT(TCCR0_REG,WGM01_BIT);
	/* TO ENABLE TIMER0 CM INTERRUPT */
	SET_BIT(TIMSK_REG,OCIE0_BIT);
#endif
}
     dcc:	08 95       	ret

00000dce <M_Timer_Void_TimerSetTime>:
		Local_U8_DivisionValue--;
	}
	OCR0_REG = Local_U8_DivisionValue - 1;
	Timer_U32_NumOfCM = Local_U32_TotalTicks / Local_U8_DivisionValue;
#endif
}
     dce:	08 95       	ret

00000dd0 <M_Timer_Void_TimerStart>:
void M_Timer_Void_TimerStart(u8 Copy_U8_TimerChannel)
{
	switch(Copy_U8_TimerChannel)
     dd0:	88 23       	and	r24, r24
     dd2:	19 f0       	breq	.+6      	; 0xdda <M_Timer_Void_TimerStart+0xa>
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	c1 f4       	brne	.+48     	; 0xe08 <M_Timer_Void_TimerStart+0x38>
     dd8:	0c c0       	rjmp	.+24     	; 0xdf2 <M_Timer_Void_TimerStart+0x22>
	{
	case TIMER0_CHANNEL:
#if   TIMER0_PRESCALER_DF   ==   1024
	SET_BIT(TCCR0_REG,CS00_BIT);
     dda:	e3 e5       	ldi	r30, 0x53	; 83
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	81 60       	ori	r24, 0x01	; 1
     de2:	80 83       	st	Z, r24
	CLR_BIT(TCCR0_REG,CS01_BIT);
     de4:	80 81       	ld	r24, Z
     de6:	8d 7f       	andi	r24, 0xFD	; 253
     de8:	80 83       	st	Z, r24
	SET_BIT(TCCR0_REG,CS02_BIT);
     dea:	80 81       	ld	r24, Z
     dec:	84 60       	ori	r24, 0x04	; 4
     dee:	80 83       	st	Z, r24
     df0:	08 95       	ret
	SET_BIT(TCCR0_REG,CS02_BIT);
#endif
		break;
	case TIMER1_CHANNEL:
#if   TIMER1_PRESCALER_DF   ==   1024
		SET_BIT(TCCR1B_REG,CS10_BIT);
     df2:	ee e4       	ldi	r30, 0x4E	; 78
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	81 60       	ori	r24, 0x01	; 1
     dfa:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
     dfc:	80 81       	ld	r24, Z
     dfe:	8d 7f       	andi	r24, 0xFD	; 253
     e00:	80 83       	st	Z, r24
		SET_BIT(TCCR1B_REG,CS12_BIT);
     e02:	80 81       	ld	r24, Z
     e04:	84 60       	ori	r24, 0x04	; 4
     e06:	80 83       	st	Z, r24
     e08:	08 95       	ret

00000e0a <M_Timer_Void_TimerStop>:
	default: break;
	}
}
void M_Timer_Void_TimerStop(u8 Copy_U8_TimerChannel)
{
	switch(Copy_U8_TimerChannel)
     e0a:	88 23       	and	r24, r24
     e0c:	19 f0       	breq	.+6      	; 0xe14 <M_Timer_Void_TimerStop+0xa>
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	c1 f4       	brne	.+48     	; 0xe42 <M_Timer_Void_TimerStop+0x38>
     e12:	0c c0       	rjmp	.+24     	; 0xe2c <M_Timer_Void_TimerStop+0x22>
	{
	case TIMER0_CHANNEL:
		CLR_BIT(TCCR0_REG,CS00_BIT);
     e14:	e3 e5       	ldi	r30, 0x53	; 83
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	8e 7f       	andi	r24, 0xFE	; 254
     e1c:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,CS01_BIT);
     e1e:	80 81       	ld	r24, Z
     e20:	8d 7f       	andi	r24, 0xFD	; 253
     e22:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,CS02_BIT);
     e24:	80 81       	ld	r24, Z
     e26:	8b 7f       	andi	r24, 0xFB	; 251
     e28:	80 83       	st	Z, r24
     e2a:	08 95       	ret

		break;
	case TIMER1_CHANNEL:
		CLR_BIT(TCCR1B_REG,CS10_BIT);
     e2c:	ee e4       	ldi	r30, 0x4E	; 78
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	8e 7f       	andi	r24, 0xFE	; 254
     e34:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
     e36:	80 81       	ld	r24, Z
     e38:	8d 7f       	andi	r24, 0xFD	; 253
     e3a:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG,CS12_BIT);
     e3c:	80 81       	ld	r24, Z
     e3e:	8b 7f       	andi	r24, 0xFB	; 251
     e40:	80 83       	st	Z, r24
     e42:	08 95       	ret

00000e44 <M_Timer_Void_PWMSetDutyCycle>:
	default: break;
	}
}

void M_Timer_Void_PWMSetDutyCycle(u8 Copy_U8_TimerChannel,f32 Copy_F32_DutyCycle)
{
     e44:	ef 92       	push	r14
     e46:	ff 92       	push	r15
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	7a 01       	movw	r14, r20
     e4e:	8b 01       	movw	r16, r22
	switch(Copy_U8_TimerChannel)
     e50:	88 23       	and	r24, r24
     e52:	19 f0       	breq	.+6      	; 0xe5a <M_Timer_Void_PWMSetDutyCycle+0x16>
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	99 f5       	brne	.+102    	; 0xebe <M_Timer_Void_PWMSetDutyCycle+0x7a>
     e58:	18 c0       	rjmp	.+48     	; 0xe8a <M_Timer_Void_PWMSetDutyCycle+0x46>
	{
	case TIMER0_CHANNEL:
#if TIMER0_MODE   ==   FAST_PWM_MODE
	OCR0_REG = ((Copy_F32_DutyCycle * 256 ) / 100) - 1;
     e5a:	cb 01       	movw	r24, r22
     e5c:	ba 01       	movw	r22, r20
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e8       	ldi	r20, 0x80	; 128
     e64:	53 e4       	ldi	r21, 0x43	; 67
     e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	48 ec       	ldi	r20, 0xC8	; 200
     e70:	52 e4       	ldi	r21, 0x42	; 66
     e72:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 e8       	ldi	r20, 0x80	; 128
     e7c:	5f e3       	ldi	r21, 0x3F	; 63
     e7e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e86:	6c bf       	out	0x3c, r22	; 60
     e88:	1a c0       	rjmp	.+52     	; 0xebe <M_Timer_Void_PWMSetDutyCycle+0x7a>
	OCR0_REG = ((Copy_F32_DutyCycle * 255 ) / 100);
#endif

		break;
	case TIMER1_CHANNEL:
		OCR1A_REG = ((Copy_F32_DutyCycle * ICR1_REG ) / 100) - 1;
     e8a:	66 b5       	in	r22, 0x26	; 38
     e8c:	77 b5       	in	r23, 0x27	; 39
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
     e96:	a8 01       	movw	r20, r16
     e98:	97 01       	movw	r18, r14
     e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	48 ec       	ldi	r20, 0xC8	; 200
     ea4:	52 e4       	ldi	r21, 0x42	; 66
     ea6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	40 e8       	ldi	r20, 0x80	; 128
     eb0:	5f e3       	ldi	r21, 0x3F	; 63
     eb2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eba:	7b bd       	out	0x2b, r23	; 43
     ebc:	6a bd       	out	0x2a, r22	; 42
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	ff 90       	pop	r15
     ec4:	ef 90       	pop	r14
     ec6:	08 95       	ret

00000ec8 <M_Timer_Void_PWMStart>:
void M_Timer_Void_PWMStart(u8 Copy_U8_TimerChannel)
{
	M_Timer_Void_TimerStart(Copy_U8_TimerChannel);
     ec8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <M_Timer_Void_TimerStart>
}
     ecc:	08 95       	ret

00000ece <M_Timer_Void_PWMStop>:
void M_Timer_Void_PWMStop(u8 Copy_U8_TimerChannel)
{
	M_Timer_Void_TimerStop(Copy_U8_TimerChannel);
     ece:	0e 94 05 07 	call	0xe0a	; 0xe0a <M_Timer_Void_TimerStop>
}
     ed2:	08 95       	ret

00000ed4 <M_Timer_Void_SetCallBack>:

void M_Timer_Void_SetCallBack(void(*Copy_Ptr)(void))
{
	Timer_CallBack = Copy_Ptr;
     ed4:	90 93 44 02 	sts	0x0244, r25
     ed8:	80 93 43 02 	sts	0x0243, r24
}
     edc:	08 95       	ret

00000ede <M_Timer_Void_PWMInit>:
	default: break;
	}
}
void M_Timer_Void_PWMInit(u8 Copy_U8_TimerChannel)
{
	switch(Copy_U8_TimerChannel)
     ede:	88 23       	and	r24, r24
     ee0:	19 f0       	breq	.+6      	; 0xee8 <M_Timer_Void_PWMInit+0xa>
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	91 f5       	brne	.+100    	; 0xf4a <M_Timer_Void_PWMInit+0x6c>
     ee6:	13 c0       	rjmp	.+38     	; 0xf0e <M_Timer_Void_PWMInit+0x30>
	{
	case TIMER0_CHANNEL:
		M_DIO_Void_SetPinDirection(PB3_PIN,OUTPUT);
     ee8:	87 e1       	ldi	r24, 0x17	; 23
     eea:	61 e0       	ldi	r22, 0x01	; 1
     eec:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	#if TIMER0_MODE   ==   FAST_PWM_MODE
		SET_BIT(TCCR0_REG,WGM00_BIT);
     ef0:	e3 e5       	ldi	r30, 0x53	; 83
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	80 64       	ori	r24, 0x40	; 64
     ef8:	80 83       	st	Z, r24
		SET_BIT(TCCR0_REG,WGM01_BIT);
     efa:	80 81       	ld	r24, Z
     efc:	88 60       	ori	r24, 0x08	; 8
     efe:	80 83       	st	Z, r24
	#elif TIMER0_MODE   ==   PHASE_CORRECT_PWM_MODE
		SET_BIT(TCCR0_REG,WGM00_BIT);
		CLR_BIT(TCCR0_REG,WGM01_BIT);
	#endif
	#if   TIMER0_FAST_PWM_MODE   ==   NON_INVERTED
		CLR_BIT(TCCR0_REG,COM00_BIT);
     f00:	80 81       	ld	r24, Z
     f02:	8f 7e       	andi	r24, 0xEF	; 239
     f04:	80 83       	st	Z, r24
		SET_BIT(TCCR0_REG,COM01_BIT);
     f06:	80 81       	ld	r24, Z
     f08:	80 62       	ori	r24, 0x20	; 32
     f0a:	80 83       	st	Z, r24
     f0c:	08 95       	ret
		SET_BIT(TCCR0_REG,COM00_BIT);
		SET_BIT(TCCR0_REG,COM01_BIT);
	#endif
		break;
	case TIMER1_CHANNEL:
		M_DIO_Void_SetPinDirection(PD5_PIN,OUTPUT);
     f0e:	8d e2       	ldi	r24, 0x2D	; 45
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
		/* TO SELECT MODE NO. 14 IN TABLE 47 */
		CLR_BIT(TCCR1A_REG,WGM10_BIT);
     f16:	af e4       	ldi	r26, 0x4F	; 79
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	8c 91       	ld	r24, X
     f1c:	8e 7f       	andi	r24, 0xFE	; 254
     f1e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,WGM11_BIT);
     f20:	8c 91       	ld	r24, X
     f22:	82 60       	ori	r24, 0x02	; 2
     f24:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM12_BIT);
     f26:	ee e4       	ldi	r30, 0x4E	; 78
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	88 60       	ori	r24, 0x08	; 8
     f2e:	80 83       	st	Z, r24
		SET_BIT(TCCR1B_REG,WGM13_BIT);
     f30:	80 81       	ld	r24, Z
     f32:	80 61       	ori	r24, 0x10	; 16
     f34:	80 83       	st	Z, r24
		/* TO SELECT NON INVERTED MODE */
		CLR_BIT(TCCR1A_REG,COM1A0_BIT);
     f36:	8c 91       	ld	r24, X
     f38:	8f 7b       	andi	r24, 0xBF	; 191
     f3a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,COM1A1_BIT);
     f3c:	8c 91       	ld	r24, X
     f3e:	80 68       	ori	r24, 0x80	; 128
     f40:	8c 93       	st	X, r24
		ICR1_REG = ((F_OSC * 1000000) / TIMER1_PRESCALER_DF) / F_PWM1;
     f42:	84 e0       	ldi	r24, 0x04	; 4
     f44:	91 e0       	ldi	r25, 0x01	; 1
     f46:	97 bd       	out	0x27, r25	; 39
     f48:	86 bd       	out	0x26, r24	; 38
     f4a:	08 95       	ret

00000f4c <M_SPI_U8_SPITransive>:
	/* TO ENABLE SPI CIRCUIT */
	SET_BIT(SPCR_REG,SPE_BIT);
}
u8   M_SPI_U8_SPITransive(u8 Copy_U8_Data)
{
	SPDR_REG = Copy_U8_Data;
     f4c:	8f b9       	out	0x0f, r24	; 15
	while(GET_BIT(SPSR_REG,SPIF_BIT) == SPI_STILL_PROCESSING);
     f4e:	ee e2       	ldi	r30, 0x2E	; 46
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	88 23       	and	r24, r24
     f56:	ec f7       	brge	.-6      	; 0xf52 <M_SPI_U8_SPITransive+0x6>
	return SPDR_REG;
     f58:	8f b1       	in	r24, 0x0f	; 15
}
     f5a:	08 95       	ret

00000f5c <M_SPI_Void_SPIInit>:
	_delay_ms(1000);
	/* TO SELECT PRESCALER DV -> 128 */
	SET_BIT(SPCR_REG,SPR0_BIT);
	SET_BIT(SPCR_REG,SPR1_BIT);
#elif SPI_MODE   ==   SLAVE_MODE
	M_DIO_Void_SetPinDirection(PB4_PIN,INPUT);
     f5c:	88 e1       	ldi	r24, 0x18	; 24
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PB5_PIN,INPUT);
     f64:	89 e1       	ldi	r24, 0x19	; 25
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PB6_PIN,OUTPUT);
     f6c:	8a e1       	ldi	r24, 0x1A	; 26
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PB7_PIN,INPUT);
     f74:	8b e1       	ldi	r24, 0x1B	; 27
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	CLR_BIT(SPCR_REG,MSTR_BIT);
     f7c:	ed e2       	ldi	r30, 0x2D	; 45
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8f 7e       	andi	r24, 0xEF	; 239
     f84:	80 83       	st	Z, r24
#endif

	/* TO SEND FROM LSB FIRST */
	SET_BIT(SPCR_REG,DORD_BIT);
     f86:	80 81       	ld	r24, Z
     f88:	80 62       	ori	r24, 0x20	; 32
     f8a:	80 83       	st	Z, r24

	/* TO ENABLE SPI CIRCUIT */
	SET_BIT(SPCR_REG,SPE_BIT);
     f8c:	80 81       	ld	r24, Z
     f8e:	80 64       	ori	r24, 0x40	; 64
     f90:	80 83       	st	Z, r24
}
     f92:	08 95       	ret

00000f94 <M_I2C_vid_I2CInit>:

void M_I2C_vid_I2CInit(void)
{
#if   I2C_MODE == I2C_MASTER_MODE
	 //TO SELECT THE FSCL -> 400HZ
	 TWBR_REG = 12;
     f94:	8c e0       	ldi	r24, 0x0C	; 12
     f96:	80 b9       	out	0x00, r24	; 0
#elif I2C_MODE == I2C_SLAVE_MODE
	 TWAR_REG = (I2C_SLAVE_ADDRESS << 0x01) | I2C_GENERAL_CALL;
#endif
	 //ENABLE THE I2C CIRCUIT
	 SET_BIT(TWCR_REG, TWEN_BIT);
     f98:	e6 e5       	ldi	r30, 0x56	; 86
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	84 60       	ori	r24, 0x04	; 4
     fa0:	80 83       	st	Z, r24
}
     fa2:	08 95       	ret

00000fa4 <M_I2C_vid_I2CStartCondition>:
void M_I2C_vid_I2CStartCondition(void)
{
	SET_BIT(TWCR_REG, TWSTA_BIT);
     fa4:	e6 e5       	ldi	r30, 0x56	; 86
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	80 62       	ori	r24, 0x20	; 32
     fac:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG, TWINT_BIT);   /*TO CLEAR THE FLAG*/
     fae:	80 81       	ld	r24, Z
     fb0:	80 68       	ori	r24, 0x80	; 128
     fb2:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG, TWINT_BIT) == I2C_STILL_PROCESSING);
     fb4:	80 81       	ld	r24, Z
     fb6:	88 23       	and	r24, r24
     fb8:	ec f7       	brge	.-6      	; 0xfb4 <M_I2C_vid_I2CStartCondition+0x10>
	while((TWSR_REG & 0xF8) != I2C_START_CONDTION_HAS_BEEN_TRANSMITTED);
     fba:	e1 e2       	ldi	r30, 0x21	; 33
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	88 7f       	andi	r24, 0xF8	; 248
     fc2:	88 30       	cpi	r24, 0x08	; 8
     fc4:	e1 f7       	brne	.-8      	; 0xfbe <M_I2C_vid_I2CStartCondition+0x1a>
}
     fc6:	08 95       	ret

00000fc8 <M_I2C_vid_I2CStopCondition>:
void M_I2C_vid_I2CStopCondition(void)
{
	SET_BIT(TWCR_REG, TWSTO_BIT);
     fc8:	e6 e5       	ldi	r30, 0x56	; 86
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	80 61       	ori	r24, 0x10	; 16
     fd0:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG, TWINT_BIT);   /*TO CLEAR THE FLAG*/
     fd2:	80 81       	ld	r24, Z
     fd4:	80 68       	ori	r24, 0x80	; 128
     fd6:	80 83       	st	Z, r24
}
     fd8:	08 95       	ret

00000fda <M_I2C_vid_I2CRepeatCondition>:
void M_I2C_vid_I2CRepeatCondition(void)
{
	SET_BIT(TWCR_REG, TWSTA_BIT);
     fda:	e6 e5       	ldi	r30, 0x56	; 86
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	80 62       	ori	r24, 0x20	; 32
     fe2:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG, TWINT_BIT);  /*TO CLEAR THE FLAG*/
     fe4:	80 81       	ld	r24, Z
     fe6:	80 68       	ori	r24, 0x80	; 128
     fe8:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG, TWINT_BIT) == I2C_STILL_PROCESSING);
     fea:	80 81       	ld	r24, Z
     fec:	88 23       	and	r24, r24
     fee:	ec f7       	brge	.-6      	; 0xfea <M_I2C_vid_I2CRepeatCondition+0x10>
}
     ff0:	08 95       	ret

00000ff2 <M_I2C_vid_I2CSendSlaveAddressWrite>:
void M_I2C_vid_I2CSendSlaveAddressWrite(u8 Copy_U8_SlaveAddress)
{
	TWDR_REG = (Copy_U8_SlaveAddress << 0x01);
     ff2:	88 0f       	add	r24, r24
     ff4:	83 b9       	out	0x03, r24	; 3
	SET_BIT(TWCR_REG, TWINT_BIT);   /*TO CLEAR THE FLAG*/
     ff6:	e6 e5       	ldi	r30, 0x56	; 86
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	80 68       	ori	r24, 0x80	; 128
     ffe:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG, TWINT_BIT) == I2C_STILL_PROCESSING);
    1000:	80 81       	ld	r24, Z
    1002:	88 23       	and	r24, r24
    1004:	ec f7       	brge	.-6      	; 0x1000 <M_I2C_vid_I2CSendSlaveAddressWrite+0xe>
}
    1006:	08 95       	ret

00001008 <M_I2C_vid_I2CSendSlaveAddressRead>:
void M_I2C_vid_I2CSendSlaveAddressRead(u8 Copy_U8_SlaveAddress)
{
	TWDR_REG = (Copy_U8_SlaveAddress << 0x01) | 0x01;
    1008:	88 0f       	add	r24, r24
    100a:	81 60       	ori	r24, 0x01	; 1
    100c:	83 b9       	out	0x03, r24	; 3
	CLR_BIT(TWCR_REG, TWSTA_BIT);
    100e:	e6 e5       	ldi	r30, 0x56	; 86
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8f 7d       	andi	r24, 0xDF	; 223
    1016:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG, TWINT_BIT);   /*TO CLEAR THE FLAG*/
    1018:	80 81       	ld	r24, Z
    101a:	80 68       	ori	r24, 0x80	; 128
    101c:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG, TWINT_BIT) == I2C_STILL_PROCESSING);
    101e:	80 81       	ld	r24, Z
    1020:	88 23       	and	r24, r24
    1022:	ec f7       	brge	.-6      	; 0x101e <M_I2C_vid_I2CSendSlaveAddressRead+0x16>
}
    1024:	08 95       	ret

00001026 <M_I2C_vid_I2CSendByte>:
void M_I2C_vid_I2CSendByte(u8 Copy_U8_Data)
{
	u32 Local_U32_Counter = 0;
	TWDR_REG = Copy_U8_Data;
    1026:	83 b9       	out	0x03, r24	; 3
	CLR_BIT(TWCR_REG, TWSTA_BIT);
    1028:	e6 e5       	ldi	r30, 0x56	; 86
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	8f 7d       	andi	r24, 0xDF	; 223
    1030:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG, TWINT_BIT);   /*TO CLEAR THE FLAG*/
    1032:	80 81       	ld	r24, Z
    1034:	80 68       	ori	r24, 0x80	; 128
    1036:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG, TWINT_BIT) == I2C_STILL_PROCESSING);
    1038:	80 81       	ld	r24, Z
    103a:	88 23       	and	r24, r24
    103c:	ec f7       	brge	.-6      	; 0x1038 <M_I2C_vid_I2CSendByte+0x12>
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	50 e0       	ldi	r21, 0x00	; 0
	while(Local_U32_Counter < 2000000)
	{
		if((TWSR_REG & 0xF8) == I2C_DATA_BYTE_TRASMITTED_ACK_REC)
    1046:	e1 e2       	ldi	r30, 0x21	; 33
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	88 7f       	andi	r24, 0xF8	; 248
    104e:	88 32       	cpi	r24, 0x28	; 40
    1050:	61 f0       	breq	.+24     	; 0x106a <M_I2C_vid_I2CSendByte+0x44>
			break;
		Local_U32_Counter++;
    1052:	2f 5f       	subi	r18, 0xFF	; 255
    1054:	3f 4f       	sbci	r19, 0xFF	; 255
    1056:	4f 4f       	sbci	r20, 0xFF	; 255
    1058:	5f 4f       	sbci	r21, 0xFF	; 255
	u32 Local_U32_Counter = 0;
	TWDR_REG = Copy_U8_Data;
	CLR_BIT(TWCR_REG, TWSTA_BIT);
	SET_BIT(TWCR_REG, TWINT_BIT);   /*TO CLEAR THE FLAG*/
	while(GET_BIT(TWCR_REG, TWINT_BIT) == I2C_STILL_PROCESSING);
	while(Local_U32_Counter < 2000000)
    105a:	20 38       	cpi	r18, 0x80	; 128
    105c:	84 e8       	ldi	r24, 0x84	; 132
    105e:	38 07       	cpc	r19, r24
    1060:	8e e1       	ldi	r24, 0x1E	; 30
    1062:	48 07       	cpc	r20, r24
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	58 07       	cpc	r21, r24
    1068:	81 f7       	brne	.-32     	; 0x104a <M_I2C_vid_I2CSendByte+0x24>
    106a:	08 95       	ret

0000106c <M_I2C_vid_I2CReadByte>:
		Local_U32_Counter++;
	}
}
u8 M_I2C_vid_I2CReadByte(void)
{
	CLR_BIT(TWCR_REG, TWSTA_BIT);
    106c:	e6 e5       	ldi	r30, 0x56	; 86
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	8f 7d       	andi	r24, 0xDF	; 223
    1074:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG, TWINT_BIT);   /*TO CLEAR THE FLAG*/
    1076:	80 81       	ld	r24, Z
    1078:	80 68       	ori	r24, 0x80	; 128
    107a:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG, TWINT_BIT) == I2C_STILL_PROCESSING);
    107c:	80 81       	ld	r24, Z
    107e:	88 23       	and	r24, r24
    1080:	ec f7       	brge	.-6      	; 0x107c <M_I2C_vid_I2CReadByte+0x10>
	return TWDR_REG;
    1082:	83 b1       	in	r24, 0x03	; 3
}
    1084:	08 95       	ret

00001086 <M_GIE_Void_GlobalInterruptEnable>:
#include "GIE_Interface.h"
#include "GIE_Private.h"

void M_GIE_Void_GlobalInterruptEnable(void)
{
	SET_BIT(SREG_REG,7);
    1086:	ef e5       	ldi	r30, 0x5F	; 95
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 68       	ori	r24, 0x80	; 128
    108e:	80 83       	st	Z, r24
}
    1090:	08 95       	ret

00001092 <M_GIE_Void_GlobalInterruptDisable>:
void M_GIE_Void_GlobalInterruptDisable(void)
{
	CLR_BIT(SREG_REG,7);
    1092:	ef e5       	ldi	r30, 0x5F	; 95
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8f 77       	andi	r24, 0x7F	; 127
    109a:	80 83       	st	Z, r24
}
    109c:	08 95       	ret

0000109e <M_ExtInt_Void_ExtIntInit>:
void (*ExtInt1_CallBack)(void);
void (*ExtInt2_CallBack)(void);

void M_ExtInt_Void_ExtIntInit(u8 Copy_U8_ExtIntChannel)
{
	switch(Copy_U8_ExtIntChannel)
    109e:	88 23       	and	r24, r24
    10a0:	69 f4       	brne	.+26     	; 0x10bc <M_ExtInt_Void_ExtIntInit+0x1e>
	{
	case INT0_CHANNEL:
#if   EXTINT0_SENSE_CONTROL_MODE   ==   RISING_EDGE
		SET_BIT(MCUCR_REG,ISC01_BIT);
    10a2:	e5 e5       	ldi	r30, 0x55	; 85
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	82 60       	ori	r24, 0x02	; 2
    10aa:	80 83       	st	Z, r24
		SET_BIT(MCUCR_REG,ISC00_BIT);
    10ac:	80 81       	ld	r24, Z
    10ae:	81 60       	ori	r24, 0x01	; 1
    10b0:	80 83       	st	Z, r24
#elif EXTINT0_SENSE_CONTROL_MODE   ==   LOGICAL_CHANGE
		CLR_BIT(MCUCR_REG,ISC01_BIT);
		SET_BIT(MCUCR_REG,ISC00_BIT);
#endif
		// to enable local int
		SET_BIT(GICR_REG,INT0_BIT);
    10b2:	eb e5       	ldi	r30, 0x5B	; 91
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	80 64       	ori	r24, 0x40	; 64
    10ba:	80 83       	st	Z, r24
    10bc:	08 95       	ret

000010be <M_ExtInt_Void_SetCallBack>:
	}
}

void M_ExtInt_Void_SetCallBack(u8 Copy_U8_ExtIntChannel,void(*Copy_Ptr)(void))
{
	switch(Copy_U8_ExtIntChannel)
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	51 f0       	breq	.+20     	; 0x10d6 <M_ExtInt_Void_SetCallBack+0x18>
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	18 f0       	brcs	.+6      	; 0x10cc <M_ExtInt_Void_SetCallBack+0xe>
    10c6:	82 30       	cpi	r24, 0x02	; 2
    10c8:	79 f4       	brne	.+30     	; 0x10e8 <M_ExtInt_Void_SetCallBack+0x2a>
    10ca:	0a c0       	rjmp	.+20     	; 0x10e0 <M_ExtInt_Void_SetCallBack+0x22>
	{
	case INT0_CHANNEL:	ExtInt0_CallBack = Copy_Ptr; break;
    10cc:	70 93 4a 02 	sts	0x024A, r23
    10d0:	60 93 49 02 	sts	0x0249, r22
    10d4:	08 95       	ret
	case INT1_CHANNEL:	ExtInt1_CallBack = Copy_Ptr; break;
    10d6:	70 93 46 02 	sts	0x0246, r23
    10da:	60 93 45 02 	sts	0x0245, r22
    10de:	08 95       	ret
	case INT2_CHANNEL:	ExtInt2_CallBack = Copy_Ptr; break;
    10e0:	70 93 48 02 	sts	0x0248, r23
    10e4:	60 93 47 02 	sts	0x0247, r22
    10e8:	08 95       	ret

000010ea <__vector_1>:
	default:                                         break;
	}
}

ISR(INT0_vect)
{
    10ea:	1f 92       	push	r1
    10ec:	0f 92       	push	r0
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	0f 92       	push	r0
    10f2:	11 24       	eor	r1, r1
    10f4:	2f 93       	push	r18
    10f6:	3f 93       	push	r19
    10f8:	4f 93       	push	r20
    10fa:	5f 93       	push	r21
    10fc:	6f 93       	push	r22
    10fe:	7f 93       	push	r23
    1100:	8f 93       	push	r24
    1102:	9f 93       	push	r25
    1104:	af 93       	push	r26
    1106:	bf 93       	push	r27
    1108:	ef 93       	push	r30
    110a:	ff 93       	push	r31
	ExtInt0_CallBack();
    110c:	e0 91 49 02 	lds	r30, 0x0249
    1110:	f0 91 4a 02 	lds	r31, 0x024A
    1114:	09 95       	icall
}
    1116:	ff 91       	pop	r31
    1118:	ef 91       	pop	r30
    111a:	bf 91       	pop	r27
    111c:	af 91       	pop	r26
    111e:	9f 91       	pop	r25
    1120:	8f 91       	pop	r24
    1122:	7f 91       	pop	r23
    1124:	6f 91       	pop	r22
    1126:	5f 91       	pop	r21
    1128:	4f 91       	pop	r20
    112a:	3f 91       	pop	r19
    112c:	2f 91       	pop	r18
    112e:	0f 90       	pop	r0
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	0f 90       	pop	r0
    1134:	1f 90       	pop	r1
    1136:	18 95       	reti

00001138 <__vector_2>:
ISR(INT1_vect)
{
    1138:	1f 92       	push	r1
    113a:	0f 92       	push	r0
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	0f 92       	push	r0
    1140:	11 24       	eor	r1, r1
    1142:	2f 93       	push	r18
    1144:	3f 93       	push	r19
    1146:	4f 93       	push	r20
    1148:	5f 93       	push	r21
    114a:	6f 93       	push	r22
    114c:	7f 93       	push	r23
    114e:	8f 93       	push	r24
    1150:	9f 93       	push	r25
    1152:	af 93       	push	r26
    1154:	bf 93       	push	r27
    1156:	ef 93       	push	r30
    1158:	ff 93       	push	r31
	ExtInt1_CallBack();
    115a:	e0 91 45 02 	lds	r30, 0x0245
    115e:	f0 91 46 02 	lds	r31, 0x0246
    1162:	09 95       	icall
}
    1164:	ff 91       	pop	r31
    1166:	ef 91       	pop	r30
    1168:	bf 91       	pop	r27
    116a:	af 91       	pop	r26
    116c:	9f 91       	pop	r25
    116e:	8f 91       	pop	r24
    1170:	7f 91       	pop	r23
    1172:	6f 91       	pop	r22
    1174:	5f 91       	pop	r21
    1176:	4f 91       	pop	r20
    1178:	3f 91       	pop	r19
    117a:	2f 91       	pop	r18
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <__vector_3>:
ISR(INT2_vect)
{
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	2f 93       	push	r18
    1192:	3f 93       	push	r19
    1194:	4f 93       	push	r20
    1196:	5f 93       	push	r21
    1198:	6f 93       	push	r22
    119a:	7f 93       	push	r23
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    11a0:	af 93       	push	r26
    11a2:	bf 93       	push	r27
    11a4:	ef 93       	push	r30
    11a6:	ff 93       	push	r31
	ExtInt2_CallBack();
    11a8:	e0 91 47 02 	lds	r30, 0x0247
    11ac:	f0 91 48 02 	lds	r31, 0x0248
    11b0:	09 95       	icall
}
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	bf 91       	pop	r27
    11b8:	af 91       	pop	r26
    11ba:	9f 91       	pop	r25
    11bc:	8f 91       	pop	r24
    11be:	7f 91       	pop	r23
    11c0:	6f 91       	pop	r22
    11c2:	5f 91       	pop	r21
    11c4:	4f 91       	pop	r20
    11c6:	3f 91       	pop	r19
    11c8:	2f 91       	pop	r18
    11ca:	0f 90       	pop	r0
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	0f 90       	pop	r0
    11d0:	1f 90       	pop	r1
    11d2:	18 95       	reti

000011d4 <M_DIO_Void_SetPinDirection>:

#include "DIO_Interface.h"
#include "DIO_Private.h"

void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    11d4:	28 2f       	mov	r18, r24
    11d6:	36 2f       	mov	r19, r22

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    11d8:	6a e0       	ldi	r22, 0x0A	; 10
    11da:	0e 94 3e 13 	call	0x267c	; 0x267c <__udivmodqi4>
    11de:	49 2f       	mov	r20, r25
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    11e0:	82 2f       	mov	r24, r18
    11e2:	0e 94 3e 13 	call	0x267c	; 0x267c <__udivmodqi4>
	switch(Copy_U8_State)
    11e6:	33 23       	and	r19, r19
    11e8:	21 f0       	breq	.+8      	; 0x11f2 <M_DIO_Void_SetPinDirection+0x1e>
    11ea:	31 30       	cpi	r19, 0x01	; 1
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <M_DIO_Void_SetPinDirection+0x1c>
    11ee:	86 c0       	rjmp	.+268    	; 0x12fc <M_DIO_Void_SetPinDirection+0x128>
    11f0:	46 c0       	rjmp	.+140    	; 0x127e <M_DIO_Void_SetPinDirection+0xaa>
	{
	case INPUT:
		switch(Local_U8_Group)
    11f2:	82 30       	cpi	r24, 0x02	; 2
    11f4:	d1 f0       	breq	.+52     	; 0x122a <M_DIO_Void_SetPinDirection+0x56>
    11f6:	83 30       	cpi	r24, 0x03	; 3
    11f8:	20 f4       	brcc	.+8      	; 0x1202 <M_DIO_Void_SetPinDirection+0x2e>
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	09 f0       	breq	.+2      	; 0x1200 <M_DIO_Void_SetPinDirection+0x2c>
    11fe:	7e c0       	rjmp	.+252    	; 0x12fc <M_DIO_Void_SetPinDirection+0x128>
    1200:	06 c0       	rjmp	.+12     	; 0x120e <M_DIO_Void_SetPinDirection+0x3a>
    1202:	83 30       	cpi	r24, 0x03	; 3
    1204:	01 f1       	breq	.+64     	; 0x1246 <M_DIO_Void_SetPinDirection+0x72>
    1206:	84 30       	cpi	r24, 0x04	; 4
    1208:	09 f0       	breq	.+2      	; 0x120c <M_DIO_Void_SetPinDirection+0x38>
    120a:	78 c0       	rjmp	.+240    	; 0x12fc <M_DIO_Void_SetPinDirection+0x128>
    120c:	2a c0       	rjmp	.+84     	; 0x1262 <M_DIO_Void_SetPinDirection+0x8e>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
    120e:	ea e3       	ldi	r30, 0x3A	; 58
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	20 81       	ld	r18, Z
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 c0       	rjmp	.+4      	; 0x121e <M_DIO_Void_SetPinDirection+0x4a>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	4a 95       	dec	r20
    1220:	e2 f7       	brpl	.-8      	; 0x121a <M_DIO_Void_SetPinDirection+0x46>
    1222:	80 95       	com	r24
    1224:	82 23       	and	r24, r18
    1226:	80 83       	st	Z, r24
    1228:	08 95       	ret
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
    122a:	e7 e3       	ldi	r30, 0x37	; 55
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	20 81       	ld	r18, Z
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 c0       	rjmp	.+4      	; 0x123a <M_DIO_Void_SetPinDirection+0x66>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	4a 95       	dec	r20
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <M_DIO_Void_SetPinDirection+0x62>
    123e:	80 95       	com	r24
    1240:	82 23       	and	r24, r18
    1242:	80 83       	st	Z, r24
    1244:	08 95       	ret
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
    1246:	e4 e3       	ldi	r30, 0x34	; 52
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	20 81       	ld	r18, Z
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <M_DIO_Void_SetPinDirection+0x82>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	4a 95       	dec	r20
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <M_DIO_Void_SetPinDirection+0x7e>
    125a:	80 95       	com	r24
    125c:	82 23       	and	r24, r18
    125e:	80 83       	st	Z, r24
    1260:	08 95       	ret
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
    1262:	e1 e3       	ldi	r30, 0x31	; 49
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	20 81       	ld	r18, Z
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <M_DIO_Void_SetPinDirection+0x9e>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	4a 95       	dec	r20
    1274:	e2 f7       	brpl	.-8      	; 0x126e <M_DIO_Void_SetPinDirection+0x9a>
    1276:	80 95       	com	r24
    1278:	82 23       	and	r24, r18
    127a:	80 83       	st	Z, r24
    127c:	08 95       	ret
		default:                                break;
		}
		break;
		case OUTPUT:
			switch(Local_U8_Group)
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	b9 f0       	breq	.+46     	; 0x12b0 <M_DIO_Void_SetPinDirection+0xdc>
    1282:	83 30       	cpi	r24, 0x03	; 3
    1284:	18 f4       	brcc	.+6      	; 0x128c <M_DIO_Void_SetPinDirection+0xb8>
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	c9 f5       	brne	.+114    	; 0x12fc <M_DIO_Void_SetPinDirection+0x128>
    128a:	05 c0       	rjmp	.+10     	; 0x1296 <M_DIO_Void_SetPinDirection+0xc2>
    128c:	83 30       	cpi	r24, 0x03	; 3
    128e:	e9 f0       	breq	.+58     	; 0x12ca <M_DIO_Void_SetPinDirection+0xf6>
    1290:	84 30       	cpi	r24, 0x04	; 4
    1292:	a1 f5       	brne	.+104    	; 0x12fc <M_DIO_Void_SetPinDirection+0x128>
    1294:	27 c0       	rjmp	.+78     	; 0x12e4 <M_DIO_Void_SetPinDirection+0x110>
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
    1296:	ea e3       	ldi	r30, 0x3A	; 58
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	20 81       	ld	r18, Z
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <M_DIO_Void_SetPinDirection+0xd2>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	4a 95       	dec	r20
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <M_DIO_Void_SetPinDirection+0xce>
    12aa:	28 2b       	or	r18, r24
    12ac:	20 83       	st	Z, r18
    12ae:	08 95       	ret
			case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
    12b0:	e7 e3       	ldi	r30, 0x37	; 55
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	20 81       	ld	r18, Z
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <M_DIO_Void_SetPinDirection+0xec>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	4a 95       	dec	r20
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <M_DIO_Void_SetPinDirection+0xe8>
    12c4:	28 2b       	or	r18, r24
    12c6:	20 83       	st	Z, r18
    12c8:	08 95       	ret
			case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
    12ca:	e4 e3       	ldi	r30, 0x34	; 52
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	20 81       	ld	r18, Z
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <M_DIO_Void_SetPinDirection+0x106>
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	4a 95       	dec	r20
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <M_DIO_Void_SetPinDirection+0x102>
    12de:	28 2b       	or	r18, r24
    12e0:	20 83       	st	Z, r18
    12e2:	08 95       	ret
			case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
    12e4:	e1 e3       	ldi	r30, 0x31	; 49
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	20 81       	ld	r18, Z
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <M_DIO_Void_SetPinDirection+0x120>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	4a 95       	dec	r20
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <M_DIO_Void_SetPinDirection+0x11c>
    12f8:	28 2b       	or	r18, r24
    12fa:	20 83       	st	Z, r18
    12fc:	08 95       	ret

000012fe <M_DIO_Void_SetPinValue>:
			default:    break;
	}
}

void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    12fe:	28 2f       	mov	r18, r24
    1300:	36 2f       	mov	r19, r22
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1302:	6a e0       	ldi	r22, 0x0A	; 10
    1304:	0e 94 3e 13 	call	0x267c	; 0x267c <__udivmodqi4>
    1308:	49 2f       	mov	r20, r25
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    130a:	82 2f       	mov	r24, r18
    130c:	0e 94 3e 13 	call	0x267c	; 0x267c <__udivmodqi4>
	switch(Copy_U8_State)
    1310:	33 23       	and	r19, r19
    1312:	21 f0       	breq	.+8      	; 0x131c <M_DIO_Void_SetPinValue+0x1e>
    1314:	31 30       	cpi	r19, 0x01	; 1
    1316:	09 f0       	breq	.+2      	; 0x131a <M_DIO_Void_SetPinValue+0x1c>
    1318:	86 c0       	rjmp	.+268    	; 0x1426 <M_DIO_Void_SetPinValue+0x128>
    131a:	46 c0       	rjmp	.+140    	; 0x13a8 <M_DIO_Void_SetPinValue+0xaa>
	{
	case LOW:
		switch(Local_U8_Group)
    131c:	82 30       	cpi	r24, 0x02	; 2
    131e:	d1 f0       	breq	.+52     	; 0x1354 <M_DIO_Void_SetPinValue+0x56>
    1320:	83 30       	cpi	r24, 0x03	; 3
    1322:	20 f4       	brcc	.+8      	; 0x132c <M_DIO_Void_SetPinValue+0x2e>
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	09 f0       	breq	.+2      	; 0x132a <M_DIO_Void_SetPinValue+0x2c>
    1328:	7e c0       	rjmp	.+252    	; 0x1426 <M_DIO_Void_SetPinValue+0x128>
    132a:	06 c0       	rjmp	.+12     	; 0x1338 <M_DIO_Void_SetPinValue+0x3a>
    132c:	83 30       	cpi	r24, 0x03	; 3
    132e:	01 f1       	breq	.+64     	; 0x1370 <M_DIO_Void_SetPinValue+0x72>
    1330:	84 30       	cpi	r24, 0x04	; 4
    1332:	09 f0       	breq	.+2      	; 0x1336 <M_DIO_Void_SetPinValue+0x38>
    1334:	78 c0       	rjmp	.+240    	; 0x1426 <M_DIO_Void_SetPinValue+0x128>
    1336:	2a c0       	rjmp	.+84     	; 0x138c <M_DIO_Void_SetPinValue+0x8e>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    1338:	eb e3       	ldi	r30, 0x3B	; 59
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	20 81       	ld	r18, Z
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <M_DIO_Void_SetPinValue+0x4a>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	4a 95       	dec	r20
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <M_DIO_Void_SetPinValue+0x46>
    134c:	80 95       	com	r24
    134e:	82 23       	and	r24, r18
    1350:	80 83       	st	Z, r24
    1352:	08 95       	ret
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    1354:	e8 e3       	ldi	r30, 0x38	; 56
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	20 81       	ld	r18, Z
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <M_DIO_Void_SetPinValue+0x66>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	4a 95       	dec	r20
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <M_DIO_Void_SetPinValue+0x62>
    1368:	80 95       	com	r24
    136a:	82 23       	and	r24, r18
    136c:	80 83       	st	Z, r24
    136e:	08 95       	ret
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    1370:	e5 e3       	ldi	r30, 0x35	; 53
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	20 81       	ld	r18, Z
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <M_DIO_Void_SetPinValue+0x82>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	4a 95       	dec	r20
    1382:	e2 f7       	brpl	.-8      	; 0x137c <M_DIO_Void_SetPinValue+0x7e>
    1384:	80 95       	com	r24
    1386:	82 23       	and	r24, r18
    1388:	80 83       	st	Z, r24
    138a:	08 95       	ret
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    138c:	e2 e3       	ldi	r30, 0x32	; 50
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	20 81       	ld	r18, Z
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 c0       	rjmp	.+4      	; 0x139c <M_DIO_Void_SetPinValue+0x9e>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	4a 95       	dec	r20
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <M_DIO_Void_SetPinValue+0x9a>
    13a0:	80 95       	com	r24
    13a2:	82 23       	and	r24, r18
    13a4:	80 83       	st	Z, r24
    13a6:	08 95       	ret
		default:                                 break;
		}
		break;
		case HIGH:
			switch(Local_U8_Group)
    13a8:	82 30       	cpi	r24, 0x02	; 2
    13aa:	b9 f0       	breq	.+46     	; 0x13da <M_DIO_Void_SetPinValue+0xdc>
    13ac:	83 30       	cpi	r24, 0x03	; 3
    13ae:	18 f4       	brcc	.+6      	; 0x13b6 <M_DIO_Void_SetPinValue+0xb8>
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	c9 f5       	brne	.+114    	; 0x1426 <M_DIO_Void_SetPinValue+0x128>
    13b4:	05 c0       	rjmp	.+10     	; 0x13c0 <M_DIO_Void_SetPinValue+0xc2>
    13b6:	83 30       	cpi	r24, 0x03	; 3
    13b8:	e9 f0       	breq	.+58     	; 0x13f4 <M_DIO_Void_SetPinValue+0xf6>
    13ba:	84 30       	cpi	r24, 0x04	; 4
    13bc:	a1 f5       	brne	.+104    	; 0x1426 <M_DIO_Void_SetPinValue+0x128>
    13be:	27 c0       	rjmp	.+78     	; 0x140e <M_DIO_Void_SetPinValue+0x110>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    13c0:	eb e3       	ldi	r30, 0x3B	; 59
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	20 81       	ld	r18, Z
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <M_DIO_Void_SetPinValue+0xd2>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	4a 95       	dec	r20
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <M_DIO_Void_SetPinValue+0xce>
    13d4:	28 2b       	or	r18, r24
    13d6:	20 83       	st	Z, r18
    13d8:	08 95       	ret
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    13da:	e8 e3       	ldi	r30, 0x38	; 56
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	20 81       	ld	r18, Z
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <M_DIO_Void_SetPinValue+0xec>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	4a 95       	dec	r20
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <M_DIO_Void_SetPinValue+0xe8>
    13ee:	28 2b       	or	r18, r24
    13f0:	20 83       	st	Z, r18
    13f2:	08 95       	ret
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    13f4:	e5 e3       	ldi	r30, 0x35	; 53
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	20 81       	ld	r18, Z
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <M_DIO_Void_SetPinValue+0x106>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	4a 95       	dec	r20
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <M_DIO_Void_SetPinValue+0x102>
    1408:	28 2b       	or	r18, r24
    140a:	20 83       	st	Z, r18
    140c:	08 95       	ret
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    140e:	e2 e3       	ldi	r30, 0x32	; 50
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	20 81       	ld	r18, Z
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 c0       	rjmp	.+4      	; 0x141e <M_DIO_Void_SetPinValue+0x120>
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	4a 95       	dec	r20
    1420:	e2 f7       	brpl	.-8      	; 0x141a <M_DIO_Void_SetPinValue+0x11c>
    1422:	28 2b       	or	r18, r24
    1424:	20 83       	st	Z, r18
    1426:	08 95       	ret

00001428 <M_DIO_Void_GetPinValue>:
			default:    break;
	}
}

u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
    1428:	28 2f       	mov	r18, r24
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    142a:	6a e0       	ldi	r22, 0x0A	; 10
    142c:	0e 94 3e 13 	call	0x267c	; 0x267c <__udivmodqi4>
    1430:	39 2f       	mov	r19, r25
	u8 Local_U8_Group  = Copy_U8_Number / 10;
	u8 Local_U8_Reading = 0;
	switch(Local_U8_Group)
    1432:	82 2f       	mov	r24, r18
    1434:	0e 94 3e 13 	call	0x267c	; 0x267c <__udivmodqi4>
    1438:	82 30       	cpi	r24, 0x02	; 2
    143a:	a1 f0       	breq	.+40     	; 0x1464 <M_DIO_Void_GetPinValue+0x3c>
    143c:	83 30       	cpi	r24, 0x03	; 3
    143e:	18 f4       	brcc	.+6      	; 0x1446 <M_DIO_Void_GetPinValue+0x1e>
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	29 f4       	brne	.+10     	; 0x144e <M_DIO_Void_GetPinValue+0x26>
    1444:	06 c0       	rjmp	.+12     	; 0x1452 <M_DIO_Void_GetPinValue+0x2a>
    1446:	83 30       	cpi	r24, 0x03	; 3
    1448:	b1 f0       	breq	.+44     	; 0x1476 <M_DIO_Void_GetPinValue+0x4e>
    144a:	84 30       	cpi	r24, 0x04	; 4
    144c:	e9 f0       	breq	.+58     	; 0x1488 <M_DIO_Void_GetPinValue+0x60>
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	08 95       	ret
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
    1452:	89 b3       	in	r24, 0x19	; 25
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 c0       	rjmp	.+4      	; 0x145c <M_DIO_Void_GetPinValue+0x34>
    1458:	95 95       	asr	r25
    145a:	87 95       	ror	r24
    145c:	3a 95       	dec	r19
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <M_DIO_Void_GetPinValue+0x30>
    1460:	81 70       	andi	r24, 0x01	; 1
    1462:	08 95       	ret
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    1464:	86 b3       	in	r24, 0x16	; 22
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 c0       	rjmp	.+4      	; 0x146e <M_DIO_Void_GetPinValue+0x46>
    146a:	95 95       	asr	r25
    146c:	87 95       	ror	r24
    146e:	3a 95       	dec	r19
    1470:	e2 f7       	brpl	.-8      	; 0x146a <M_DIO_Void_GetPinValue+0x42>
    1472:	81 70       	andi	r24, 0x01	; 1
    1474:	08 95       	ret
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    1476:	83 b3       	in	r24, 0x13	; 19
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <M_DIO_Void_GetPinValue+0x58>
    147c:	95 95       	asr	r25
    147e:	87 95       	ror	r24
    1480:	3a 95       	dec	r19
    1482:	e2 f7       	brpl	.-8      	; 0x147c <M_DIO_Void_GetPinValue+0x54>
    1484:	81 70       	andi	r24, 0x01	; 1
    1486:	08 95       	ret
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    1488:	80 b3       	in	r24, 0x10	; 16
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <M_DIO_Void_GetPinValue+0x6a>
    148e:	95 95       	asr	r25
    1490:	87 95       	ror	r24
    1492:	3a 95       	dec	r19
    1494:	e2 f7       	brpl	.-8      	; 0x148e <M_DIO_Void_GetPinValue+0x66>
    1496:	81 70       	andi	r24, 0x01	; 1
	default:                                                   break;
	}
	return Local_U8_Reading ;
}
    1498:	08 95       	ret

0000149a <M_DIO_Void_TogPin>:
void M_DIO_Void_TogPin(u8 Copy_U8_Number)
{
    149a:	28 2f       	mov	r18, r24
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    149c:	6a e0       	ldi	r22, 0x0A	; 10
    149e:	0e 94 3e 13 	call	0x267c	; 0x267c <__udivmodqi4>
    14a2:	39 2f       	mov	r19, r25
	u8 Local_U8_Group  = Copy_U8_Number / 10;
	switch(Local_U8_Group)
    14a4:	82 2f       	mov	r24, r18
    14a6:	0e 94 3e 13 	call	0x267c	; 0x267c <__udivmodqi4>
    14aa:	82 30       	cpi	r24, 0x02	; 2
    14ac:	b9 f0       	breq	.+46     	; 0x14dc <M_DIO_Void_TogPin+0x42>
    14ae:	83 30       	cpi	r24, 0x03	; 3
    14b0:	18 f4       	brcc	.+6      	; 0x14b8 <M_DIO_Void_TogPin+0x1e>
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	c9 f5       	brne	.+114    	; 0x1528 <M_DIO_Void_TogPin+0x8e>
    14b6:	05 c0       	rjmp	.+10     	; 0x14c2 <M_DIO_Void_TogPin+0x28>
    14b8:	83 30       	cpi	r24, 0x03	; 3
    14ba:	e9 f0       	breq	.+58     	; 0x14f6 <M_DIO_Void_TogPin+0x5c>
    14bc:	84 30       	cpi	r24, 0x04	; 4
    14be:	a1 f5       	brne	.+104    	; 0x1528 <M_DIO_Void_TogPin+0x8e>
    14c0:	27 c0       	rjmp	.+78     	; 0x1510 <M_DIO_Void_TogPin+0x76>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Bit); break;
    14c2:	eb e3       	ldi	r30, 0x3B	; 59
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	20 81       	ld	r18, Z
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <M_DIO_Void_TogPin+0x38>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	3a 95       	dec	r19
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <M_DIO_Void_TogPin+0x34>
    14d6:	28 27       	eor	r18, r24
    14d8:	20 83       	st	Z, r18
    14da:	08 95       	ret
	case 2: TOG_BIT(PORTB_REG,Local_U8_Bit); break;
    14dc:	e8 e3       	ldi	r30, 0x38	; 56
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	20 81       	ld	r18, Z
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <M_DIO_Void_TogPin+0x52>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	3a 95       	dec	r19
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <M_DIO_Void_TogPin+0x4e>
    14f0:	28 27       	eor	r18, r24
    14f2:	20 83       	st	Z, r18
    14f4:	08 95       	ret
	case 3: TOG_BIT(PORTC_REG,Local_U8_Bit); break;
    14f6:	e5 e3       	ldi	r30, 0x35	; 53
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	20 81       	ld	r18, Z
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <M_DIO_Void_TogPin+0x6c>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	3a 95       	dec	r19
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <M_DIO_Void_TogPin+0x68>
    150a:	28 27       	eor	r18, r24
    150c:	20 83       	st	Z, r18
    150e:	08 95       	ret
	case 4: TOG_BIT(PORTD_REG,Local_U8_Bit); break;
    1510:	e2 e3       	ldi	r30, 0x32	; 50
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	20 81       	ld	r18, Z
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <M_DIO_Void_TogPin+0x86>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	3a 95       	dec	r19
    1522:	e2 f7       	brpl	.-8      	; 0x151c <M_DIO_Void_TogPin+0x82>
    1524:	28 27       	eor	r18, r24
    1526:	20 83       	st	Z, r18
    1528:	08 95       	ret

0000152a <M_DIO_Void_SetPinPullUpRes>:
	default:                                 break;
	}
}
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Number,u8 Copy_U8_State)
{
    152a:	28 2f       	mov	r18, r24
    152c:	36 2f       	mov	r19, r22
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    152e:	6a e0       	ldi	r22, 0x0A	; 10
    1530:	0e 94 3e 13 	call	0x267c	; 0x267c <__udivmodqi4>
    1534:	49 2f       	mov	r20, r25
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1536:	82 2f       	mov	r24, r18
    1538:	0e 94 3e 13 	call	0x267c	; 0x267c <__udivmodqi4>
	switch(Copy_U8_State)
    153c:	33 23       	and	r19, r19
    153e:	21 f0       	breq	.+8      	; 0x1548 <M_DIO_Void_SetPinPullUpRes+0x1e>
    1540:	31 30       	cpi	r19, 0x01	; 1
    1542:	09 f0       	breq	.+2      	; 0x1546 <M_DIO_Void_SetPinPullUpRes+0x1c>
    1544:	86 c0       	rjmp	.+268    	; 0x1652 <M_DIO_Void_SetPinPullUpRes+0x128>
    1546:	46 c0       	rjmp	.+140    	; 0x15d4 <M_DIO_Void_SetPinPullUpRes+0xaa>
	{
	case DISABLE:
		switch(Local_U8_Group)
    1548:	82 30       	cpi	r24, 0x02	; 2
    154a:	d1 f0       	breq	.+52     	; 0x1580 <M_DIO_Void_SetPinPullUpRes+0x56>
    154c:	83 30       	cpi	r24, 0x03	; 3
    154e:	20 f4       	brcc	.+8      	; 0x1558 <M_DIO_Void_SetPinPullUpRes+0x2e>
    1550:	81 30       	cpi	r24, 0x01	; 1
    1552:	09 f0       	breq	.+2      	; 0x1556 <M_DIO_Void_SetPinPullUpRes+0x2c>
    1554:	7e c0       	rjmp	.+252    	; 0x1652 <M_DIO_Void_SetPinPullUpRes+0x128>
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <M_DIO_Void_SetPinPullUpRes+0x3a>
    1558:	83 30       	cpi	r24, 0x03	; 3
    155a:	01 f1       	breq	.+64     	; 0x159c <M_DIO_Void_SetPinPullUpRes+0x72>
    155c:	84 30       	cpi	r24, 0x04	; 4
    155e:	09 f0       	breq	.+2      	; 0x1562 <M_DIO_Void_SetPinPullUpRes+0x38>
    1560:	78 c0       	rjmp	.+240    	; 0x1652 <M_DIO_Void_SetPinPullUpRes+0x128>
    1562:	2a c0       	rjmp	.+84     	; 0x15b8 <M_DIO_Void_SetPinPullUpRes+0x8e>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    1564:	eb e3       	ldi	r30, 0x3B	; 59
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	20 81       	ld	r18, Z
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <M_DIO_Void_SetPinPullUpRes+0x4a>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	4a 95       	dec	r20
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <M_DIO_Void_SetPinPullUpRes+0x46>
    1578:	80 95       	com	r24
    157a:	82 23       	and	r24, r18
    157c:	80 83       	st	Z, r24
    157e:	08 95       	ret
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    1580:	e8 e3       	ldi	r30, 0x38	; 56
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	20 81       	ld	r18, Z
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <M_DIO_Void_SetPinPullUpRes+0x66>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	4a 95       	dec	r20
    1592:	e2 f7       	brpl	.-8      	; 0x158c <M_DIO_Void_SetPinPullUpRes+0x62>
    1594:	80 95       	com	r24
    1596:	82 23       	and	r24, r18
    1598:	80 83       	st	Z, r24
    159a:	08 95       	ret
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    159c:	e5 e3       	ldi	r30, 0x35	; 53
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	20 81       	ld	r18, Z
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <M_DIO_Void_SetPinPullUpRes+0x82>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	4a 95       	dec	r20
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <M_DIO_Void_SetPinPullUpRes+0x7e>
    15b0:	80 95       	com	r24
    15b2:	82 23       	and	r24, r18
    15b4:	80 83       	st	Z, r24
    15b6:	08 95       	ret
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    15b8:	e2 e3       	ldi	r30, 0x32	; 50
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	20 81       	ld	r18, Z
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <M_DIO_Void_SetPinPullUpRes+0x9e>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	4a 95       	dec	r20
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <M_DIO_Void_SetPinPullUpRes+0x9a>
    15cc:	80 95       	com	r24
    15ce:	82 23       	and	r24, r18
    15d0:	80 83       	st	Z, r24
    15d2:	08 95       	ret
		default:                                 break;
		}
		break;
		case ENABLE:
			switch(Local_U8_Group)
    15d4:	82 30       	cpi	r24, 0x02	; 2
    15d6:	b9 f0       	breq	.+46     	; 0x1606 <M_DIO_Void_SetPinPullUpRes+0xdc>
    15d8:	83 30       	cpi	r24, 0x03	; 3
    15da:	18 f4       	brcc	.+6      	; 0x15e2 <M_DIO_Void_SetPinPullUpRes+0xb8>
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	c9 f5       	brne	.+114    	; 0x1652 <M_DIO_Void_SetPinPullUpRes+0x128>
    15e0:	05 c0       	rjmp	.+10     	; 0x15ec <M_DIO_Void_SetPinPullUpRes+0xc2>
    15e2:	83 30       	cpi	r24, 0x03	; 3
    15e4:	e9 f0       	breq	.+58     	; 0x1620 <M_DIO_Void_SetPinPullUpRes+0xf6>
    15e6:	84 30       	cpi	r24, 0x04	; 4
    15e8:	a1 f5       	brne	.+104    	; 0x1652 <M_DIO_Void_SetPinPullUpRes+0x128>
    15ea:	27 c0       	rjmp	.+78     	; 0x163a <M_DIO_Void_SetPinPullUpRes+0x110>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    15ec:	eb e3       	ldi	r30, 0x3B	; 59
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	20 81       	ld	r18, Z
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <M_DIO_Void_SetPinPullUpRes+0xd2>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	4a 95       	dec	r20
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <M_DIO_Void_SetPinPullUpRes+0xce>
    1600:	28 2b       	or	r18, r24
    1602:	20 83       	st	Z, r18
    1604:	08 95       	ret
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1606:	e8 e3       	ldi	r30, 0x38	; 56
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	20 81       	ld	r18, Z
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <M_DIO_Void_SetPinPullUpRes+0xec>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	4a 95       	dec	r20
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <M_DIO_Void_SetPinPullUpRes+0xe8>
    161a:	28 2b       	or	r18, r24
    161c:	20 83       	st	Z, r18
    161e:	08 95       	ret
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1620:	e5 e3       	ldi	r30, 0x35	; 53
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	20 81       	ld	r18, Z
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <M_DIO_Void_SetPinPullUpRes+0x106>
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	4a 95       	dec	r20
    1632:	e2 f7       	brpl	.-8      	; 0x162c <M_DIO_Void_SetPinPullUpRes+0x102>
    1634:	28 2b       	or	r18, r24
    1636:	20 83       	st	Z, r18
    1638:	08 95       	ret
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    163a:	e2 e3       	ldi	r30, 0x32	; 50
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	20 81       	ld	r18, Z
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 c0       	rjmp	.+4      	; 0x164a <M_DIO_Void_SetPinPullUpRes+0x120>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	4a 95       	dec	r20
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <M_DIO_Void_SetPinPullUpRes+0x11c>
    164e:	28 2b       	or	r18, r24
    1650:	20 83       	st	Z, r18
    1652:	08 95       	ret

00001654 <M_ADC_Void_ADCInit>:
{
#if   ADC_VREF   ==   AVCC
	SET_BIT(ADMUX_REG,REFS0_BIT);
	CLR_BIT(ADMUX_REG,REFS1_BIT);
#elif ADC_VREF   ==   AREF_PIN
	CLR_BIT(ADMUX_REG,REFS0_BIT);
    1654:	e7 e2       	ldi	r30, 0x27	; 39
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	8f 7b       	andi	r24, 0xBF	; 191
    165c:	80 83       	st	Z, r24
	CLR_BIT(ADMUX_REG,REFS1_BIT);
    165e:	80 81       	ld	r24, Z
    1660:	8f 77       	andi	r24, 0x7F	; 127
    1662:	80 83       	st	Z, r24
#elif ADC_VREF   ==   _2V5
	SET_BIT(ADMUX_REG,REFS0_BIT);
	SET_BIT(ADMUX_REG,REFS1_BIT);
#endif
	/* TO SELECT RIGHT ADJUST */
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
    1664:	80 81       	ld	r24, Z
    1666:	8f 7d       	andi	r24, 0xDF	; 223
    1668:	80 83       	st	Z, r24
#if   ADC_PRESCALER_DV   ==   128
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
    166a:	e6 e2       	ldi	r30, 0x26	; 38
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	81 60       	ori	r24, 0x01	; 1
    1672:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
    1674:	80 81       	ld	r24, Z
    1676:	82 60       	ori	r24, 0x02	; 2
    1678:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
    167a:	80 81       	ld	r24, Z
    167c:	84 60       	ori	r24, 0x04	; 4
    167e:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
#endif

	/* TO ENABLE AUTO TRIGGER MODE */
	SET_BIT(ADCSRA_REG,ADATE_BIT);
    1680:	80 81       	ld	r24, Z
    1682:	80 62       	ori	r24, 0x20	; 32
    1684:	80 83       	st	Z, r24
	/* TO ENABLE ADC CIRCUIT */
	SET_BIT(ADCSRA_REG,ADEN_BIT);
    1686:	80 81       	ld	r24, Z
    1688:	80 68       	ori	r24, 0x80	; 128
    168a:	80 83       	st	Z, r24
	/* TO START CONVERSION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);
    168c:	80 81       	ld	r24, Z
    168e:	80 64       	ori	r24, 0x40	; 64
    1690:	80 83       	st	Z, r24
}
    1692:	08 95       	ret

00001694 <M_ADC_Void_ADCRead>:

u16  M_ADC_Void_ADCRead(u8 Copy_U8_ADCChannel)
{
	ADMUX_REG = (ADMUX_REG & ADMUX_MASK) | Copy_U8_ADCChannel;
    1694:	e7 e2       	ldi	r30, 0x27	; 39
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	90 81       	ld	r25, Z
    169a:	90 7e       	andi	r25, 0xE0	; 224
    169c:	89 2b       	or	r24, r25
    169e:	80 83       	st	Z, r24
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	50 e0       	ldi	r21, 0x00	; 0
	u32 Local_U32_Counter = 0;
	while(Local_U32_Counter < 2000000)
	{
		Local_U32_Counter++;
		if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_STILL_FINISHED)
    16a8:	e6 e2       	ldi	r30, 0x26	; 38
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	84 fd       	sbrc	r24, 4
    16b0:	0c c0       	rjmp	.+24     	; 0x16ca <M_ADC_Void_ADCRead+0x36>
{
	ADMUX_REG = (ADMUX_REG & ADMUX_MASK) | Copy_U8_ADCChannel;
	u32 Local_U32_Counter = 0;
	while(Local_U32_Counter < 2000000)
	{
		Local_U32_Counter++;
    16b2:	2f 5f       	subi	r18, 0xFF	; 255
    16b4:	3f 4f       	sbci	r19, 0xFF	; 255
    16b6:	4f 4f       	sbci	r20, 0xFF	; 255
    16b8:	5f 4f       	sbci	r21, 0xFF	; 255

u16  M_ADC_Void_ADCRead(u8 Copy_U8_ADCChannel)
{
	ADMUX_REG = (ADMUX_REG & ADMUX_MASK) | Copy_U8_ADCChannel;
	u32 Local_U32_Counter = 0;
	while(Local_U32_Counter < 2000000)
    16ba:	20 38       	cpi	r18, 0x80	; 128
    16bc:	84 e8       	ldi	r24, 0x84	; 132
    16be:	38 07       	cpc	r19, r24
    16c0:	8e e1       	ldi	r24, 0x1E	; 30
    16c2:	48 07       	cpc	r20, r24
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	58 07       	cpc	r21, r24
    16c8:	89 f7       	brne	.-30     	; 0x16ac <M_ADC_Void_ADCRead+0x18>
		if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_STILL_FINISHED)
		{
			break;
		}
	}
	return ADCVALUE_REG;
    16ca:	24 b1       	in	r18, 0x04	; 4
    16cc:	35 b1       	in	r19, 0x05	; 5
}
    16ce:	82 2f       	mov	r24, r18
    16d0:	93 2f       	mov	r25, r19
    16d2:	08 95       	ret

000016d4 <H_StepperMotor_vid_StepperStart>:
	M_DIO_Void_SetPinDirection(COIL_2, OUTPUT);
	M_DIO_Void_SetPinDirection(COIL_3, OUTPUT);
	M_DIO_Void_SetPinDirection(COIL_4, OUTPUT);
}
void H_StepperMotor_vid_StepperStart(void)
{
    16d4:	0f 93       	push	r16
    16d6:	1f 93       	push	r17
	M_DIO_Void_SetPinValue(COIL_1, HIGH);
    16d8:	8e e1       	ldi	r24, 0x1E	; 30
    16da:	61 e0       	ldi	r22, 0x01	; 1
    16dc:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(COIL_2, LOW);
    16e0:	8f e1       	ldi	r24, 0x1F	; 31
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(COIL_3, LOW);
    16e8:	80 e2       	ldi	r24, 0x20	; 32
    16ea:	60 e0       	ldi	r22, 0x00	; 0
    16ec:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(COIL_4, LOW);
    16f0:	81 e2       	ldi	r24, 0x21	; 33
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16f8:	00 e2       	ldi	r16, 0x20	; 32
    16fa:	1e e4       	ldi	r17, 0x4E	; 78
    16fc:	c8 01       	movw	r24, r16
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	f1 f7       	brne	.-4      	; 0x16fe <H_StepperMotor_vid_StepperStart+0x2a>
	_delay_ms(5);
	M_DIO_Void_SetPinValue(COIL_1, LOW);
    1702:	8e e1       	ldi	r24, 0x1E	; 30
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(COIL_2, HIGH);
    170a:	8f e1       	ldi	r24, 0x1F	; 31
    170c:	61 e0       	ldi	r22, 0x01	; 1
    170e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(COIL_3, LOW);
    1712:	80 e2       	ldi	r24, 0x20	; 32
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(COIL_4, LOW);
    171a:	81 e2       	ldi	r24, 0x21	; 33
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1722:	c8 01       	movw	r24, r16
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <H_StepperMotor_vid_StepperStart+0x50>
	_delay_ms(5);
	M_DIO_Void_SetPinValue(COIL_1, LOW);
    1728:	8e e1       	ldi	r24, 0x1E	; 30
    172a:	60 e0       	ldi	r22, 0x00	; 0
    172c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(COIL_2, LOW);
    1730:	8f e1       	ldi	r24, 0x1F	; 31
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(COIL_3, HIGH);
    1738:	80 e2       	ldi	r24, 0x20	; 32
    173a:	61 e0       	ldi	r22, 0x01	; 1
    173c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(COIL_4, LOW);
    1740:	81 e2       	ldi	r24, 0x21	; 33
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1748:	c8 01       	movw	r24, r16
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <H_StepperMotor_vid_StepperStart+0x76>
	_delay_ms(5);
	M_DIO_Void_SetPinValue(COIL_1, LOW);
    174e:	8e e1       	ldi	r24, 0x1E	; 30
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(COIL_2, LOW);
    1756:	8f e1       	ldi	r24, 0x1F	; 31
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(COIL_3, LOW);
    175e:	80 e2       	ldi	r24, 0x20	; 32
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(COIL_4, HIGH);
    1766:	81 e2       	ldi	r24, 0x21	; 33
    1768:	61 e0       	ldi	r22, 0x01	; 1
    176a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    176e:	c8 01       	movw	r24, r16
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <H_StepperMotor_vid_StepperStart+0x9c>
	_delay_ms(5);
}
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	08 95       	ret

0000177a <H_StepperMotor_vid_StepperInit>:
#include "Stepper_config.h"


void H_StepperMotor_vid_StepperInit(void)
{
	M_DIO_Void_SetPinDirection(COIL_1, OUTPUT);
    177a:	8e e1       	ldi	r24, 0x1E	; 30
    177c:	61 e0       	ldi	r22, 0x01	; 1
    177e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(COIL_2, OUTPUT);
    1782:	8f e1       	ldi	r24, 0x1F	; 31
    1784:	61 e0       	ldi	r22, 0x01	; 1
    1786:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(COIL_3, OUTPUT);
    178a:	80 e2       	ldi	r24, 0x20	; 32
    178c:	61 e0       	ldi	r22, 0x01	; 1
    178e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(COIL_4, OUTPUT);
    1792:	81 e2       	ldi	r24, 0x21	; 33
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
}
    179a:	08 95       	ret

0000179c <H_Servo_Void_ServoStop>:
{
	M_Timer_Void_PWMStart(TIMER1_CHANNEL);
}
void H_Servo_Void_ServoStop(void)
{
	M_Timer_Void_PWMStop(TIMER1_CHANNEL);
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	0e 94 67 07 	call	0xece	; 0xece <M_Timer_Void_PWMStop>
}
    17a2:	08 95       	ret

000017a4 <H_Servo_Void_ServoStart>:
	f32 Local_F32_DutyCycle = (((f32)Copy_U8_ServoAngel / 180.0 ) * 5.0) + 5;
	M_Timer_Void_PWMSetDutyCycle(TIMER1_CHANNEL,Local_F32_DutyCycle);
}
void H_Servo_Void_ServoStart(void)
{
	M_Timer_Void_PWMStart(TIMER1_CHANNEL);
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	0e 94 64 07 	call	0xec8	; 0xec8 <M_Timer_Void_PWMStart>
}
    17aa:	08 95       	ret

000017ac <H_Servo_Void_ServoSetAngel>:
	M_Timer_Void_PWMInit(TIMER1_CHANNEL);
}
void H_Servo_Void_ServoSetAngel(u8 Copy_U8_ServoAngel)
{
	f32 Local_F32_DutyCycle = (((f32)Copy_U8_ServoAngel / 180.0 ) * 5.0) + 5;
	M_Timer_Void_PWMSetDutyCycle(TIMER1_CHANNEL,Local_F32_DutyCycle);
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	a0 e0       	ldi	r26, 0x00	; 0
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	bc 01       	movw	r22, r24
    17b4:	cd 01       	movw	r24, r26
    17b6:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	44 e3       	ldi	r20, 0x34	; 52
    17c0:	53 e4       	ldi	r21, 0x43	; 67
    17c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 ea       	ldi	r20, 0xA0	; 160
    17cc:	50 e4       	ldi	r21, 0x40	; 64
    17ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 ea       	ldi	r20, 0xA0	; 160
    17d8:	50 e4       	ldi	r21, 0x40	; 64
    17da:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    17de:	ab 01       	movw	r20, r22
    17e0:	bc 01       	movw	r22, r24
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	0e 94 22 07 	call	0xe44	; 0xe44 <M_Timer_Void_PWMSetDutyCycle>
}
    17e8:	08 95       	ret

000017ea <H_Servo_Void_ServoInit>:

#include "Servo_Interface.h"

void H_Servo_Void_ServoInit(void)
{
	M_Timer_Void_PWMInit(TIMER1_CHANNEL);
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	0e 94 6f 07 	call	0xede	; 0xede <M_Timer_Void_PWMInit>
}
    17f0:	08 95       	ret

000017f2 <H_SSD_Void_SSDDisplay>:

	M_DIO_Void_SetPinDirection(SSD1_EN_PIN,OUTPUT);
	M_DIO_Void_SetPinDirection(SSD2_EN_PIN,OUTPUT);
}
void H_SSD_Void_SSDDisplay(u8 Copy_U8_Num)
{
    17f2:	8f 92       	push	r8
    17f4:	9f 92       	push	r9
    17f6:	af 92       	push	r10
    17f8:	bf 92       	push	r11
    17fa:	cf 92       	push	r12
    17fc:	df 92       	push	r13
    17fe:	ef 92       	push	r14
    1800:	ff 92       	push	r15
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	28 2f       	mov	r18, r24
	u8 Local_U8_Ones = Copy_U8_Num % 10;
    180c:	6a e0       	ldi	r22, 0x0A	; 10
    180e:	0e 94 3e 13 	call	0x267c	; 0x267c <__udivmodqi4>
    1812:	39 2f       	mov	r19, r25
	u8 Local_U8_Tens = Copy_U8_Num / 10;
    1814:	82 2f       	mov	r24, r18
    1816:	0e 94 3e 13 	call	0x267c	; 0x267c <__udivmodqi4>
	u16 Local_U16_Counter =0;
	for(Local_U16_Counter=0;Local_U16_Counter<500;Local_U16_Counter++)
	{
		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_Ones,0));
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_Ones,1));
    181a:	96 95       	lsr	r25
    181c:	88 24       	eor	r8, r8
    181e:	83 94       	inc	r8
    1820:	89 22       	and	r8, r25
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_Ones,2));
    1822:	93 2f       	mov	r25, r19
    1824:	96 95       	lsr	r25
    1826:	96 95       	lsr	r25
    1828:	99 24       	eor	r9, r9
    182a:	93 94       	inc	r9
    182c:	99 22       	and	r9, r25
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_Ones,3));
    182e:	a3 2e       	mov	r10, r19
    1830:	a6 94       	lsr	r10
    1832:	a6 94       	lsr	r10
    1834:	a6 94       	lsr	r10
		M_DIO_Void_SetPinValue(SSD2_EN_PIN,HIGH);
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD2_EN_PIN,LOW);

		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_Tens,0));
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_Tens,1));
    1836:	98 2f       	mov	r25, r24
    1838:	96 95       	lsr	r25
    183a:	bb 24       	eor	r11, r11
    183c:	b3 94       	inc	r11
    183e:	b9 22       	and	r11, r25
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_Tens,2));
    1840:	98 2f       	mov	r25, r24
    1842:	96 95       	lsr	r25
    1844:	96 95       	lsr	r25
    1846:	cc 24       	eor	r12, r12
    1848:	c3 94       	inc	r12
    184a:	c9 22       	and	r12, r25
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_Tens,3));
    184c:	98 2f       	mov	r25, r24
    184e:	96 95       	lsr	r25
    1850:	96 95       	lsr	r25
    1852:	96 95       	lsr	r25
    1854:	dd 24       	eor	r13, r13
    1856:	d3 94       	inc	r13
    1858:	d9 22       	and	r13, r25
    185a:	c0 e0       	ldi	r28, 0x00	; 0
    185c:	d0 e0       	ldi	r29, 0x00	; 0
	u8 Local_U8_Ones = Copy_U8_Num % 10;
	u8 Local_U8_Tens = Copy_U8_Num / 10;
	u16 Local_U16_Counter =0;
	for(Local_U16_Counter=0;Local_U16_Counter<500;Local_U16_Counter++)
	{
		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_Ones,0));
    185e:	ee 24       	eor	r14, r14
    1860:	e3 94       	inc	r14
    1862:	e3 22       	and	r14, r19
    1864:	00 ea       	ldi	r16, 0xA0	; 160
    1866:	1f e0       	ldi	r17, 0x0F	; 15

		M_DIO_Void_SetPinValue(SSD2_EN_PIN,HIGH);
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD2_EN_PIN,LOW);

		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_Tens,0));
    1868:	ff 24       	eor	r15, r15
    186a:	f3 94       	inc	r15
    186c:	f8 22       	and	r15, r24
	u8 Local_U8_Ones = Copy_U8_Num % 10;
	u8 Local_U8_Tens = Copy_U8_Num / 10;
	u16 Local_U16_Counter =0;
	for(Local_U16_Counter=0;Local_U16_Counter<500;Local_U16_Counter++)
	{
		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_Ones,0));
    186e:	8e e0       	ldi	r24, 0x0E	; 14
    1870:	6e 2d       	mov	r22, r14
    1872:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_Ones,1));
    1876:	8f e0       	ldi	r24, 0x0F	; 15
    1878:	68 2d       	mov	r22, r8
    187a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_Ones,2));
    187e:	80 e1       	ldi	r24, 0x10	; 16
    1880:	69 2d       	mov	r22, r9
    1882:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_Ones,3));
    1886:	81 e1       	ldi	r24, 0x11	; 17
    1888:	6a 2d       	mov	r22, r10
    188a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>

		M_DIO_Void_SetPinValue(SSD2_EN_PIN,HIGH);
    188e:	85 e1       	ldi	r24, 0x15	; 21
    1890:	61 e0       	ldi	r22, 0x01	; 1
    1892:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1896:	c8 01       	movw	r24, r16
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <H_SSD_Void_SSDDisplay+0xa6>
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD2_EN_PIN,LOW);
    189c:	85 e1       	ldi	r24, 0x15	; 21
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>

		M_DIO_Void_SetPinValue(SSD_A_PIN,GET_BIT(Local_U8_Tens,0));
    18a4:	8e e0       	ldi	r24, 0x0E	; 14
    18a6:	6f 2d       	mov	r22, r15
    18a8:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,GET_BIT(Local_U8_Tens,1));
    18ac:	8f e0       	ldi	r24, 0x0F	; 15
    18ae:	6b 2d       	mov	r22, r11
    18b0:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,GET_BIT(Local_U8_Tens,2));
    18b4:	80 e1       	ldi	r24, 0x10	; 16
    18b6:	6c 2d       	mov	r22, r12
    18b8:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,GET_BIT(Local_U8_Tens,3));
    18bc:	81 e1       	ldi	r24, 0x11	; 17
    18be:	6d 2d       	mov	r22, r13
    18c0:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>

		M_DIO_Void_SetPinValue(SSD1_EN_PIN,HIGH);
    18c4:	86 e1       	ldi	r24, 0x16	; 22
    18c6:	61 e0       	ldi	r22, 0x01	; 1
    18c8:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    18cc:	c8 01       	movw	r24, r16
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <H_SSD_Void_SSDDisplay+0xdc>
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD1_EN_PIN,LOW);
    18d2:	86 e1       	ldi	r24, 0x16	; 22
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
void H_SSD_Void_SSDDisplay(u8 Copy_U8_Num)
{
	u8 Local_U8_Ones = Copy_U8_Num % 10;
	u8 Local_U8_Tens = Copy_U8_Num / 10;
	u16 Local_U16_Counter =0;
	for(Local_U16_Counter=0;Local_U16_Counter<500;Local_U16_Counter++)
    18da:	21 96       	adiw	r28, 0x01	; 1
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	c4 3f       	cpi	r28, 0xF4	; 244
    18e0:	d8 07       	cpc	r29, r24
    18e2:	29 f6       	brne	.-118    	; 0x186e <H_SSD_Void_SSDDisplay+0x7c>

		M_DIO_Void_SetPinValue(SSD1_EN_PIN,HIGH);
		_delay_ms(1);
		M_DIO_Void_SetPinValue(SSD1_EN_PIN,LOW);
	}
}
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	ff 90       	pop	r15
    18ee:	ef 90       	pop	r14
    18f0:	df 90       	pop	r13
    18f2:	cf 90       	pop	r12
    18f4:	bf 90       	pop	r11
    18f6:	af 90       	pop	r10
    18f8:	9f 90       	pop	r9
    18fa:	8f 90       	pop	r8
    18fc:	08 95       	ret

000018fe <H_SSD_Void_SSDInit>:

#include "SSD_Interface.h"

void H_SSD_Void_SSDInit()
{
	M_DIO_Void_SetPinDirection(SSD_A_PIN,OUTPUT);
    18fe:	8e e0       	ldi	r24, 0x0E	; 14
    1900:	61 e0       	ldi	r22, 0x01	; 1
    1902:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_B_PIN,OUTPUT);
    1906:	8f e0       	ldi	r24, 0x0F	; 15
    1908:	61 e0       	ldi	r22, 0x01	; 1
    190a:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_C_PIN,OUTPUT);
    190e:	80 e1       	ldi	r24, 0x10	; 16
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_D_PIN,OUTPUT);
    1916:	81 e1       	ldi	r24, 0x11	; 17
    1918:	61 e0       	ldi	r22, 0x01	; 1
    191a:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinDirection(SSD1_EN_PIN,OUTPUT);
    191e:	86 e1       	ldi	r24, 0x16	; 22
    1920:	61 e0       	ldi	r22, 0x01	; 1
    1922:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD2_EN_PIN,OUTPUT);
    1926:	85 e1       	ldi	r24, 0x15	; 21
    1928:	61 e0       	ldi	r22, 0x01	; 1
    192a:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
}
    192e:	08 95       	ret

00001930 <H_PB_U8_PBRead>:
}

u8   H_PB_U8_PBRead(u8 Copy_U8_PushButton)
{
	u8 Local_U8_Reading = RELEASED;
	switch(Copy_U8_PushButton)
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	11 f1       	breq	.+68     	; 0x1978 <H_PB_U8_PBRead+0x48>
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	20 f0       	brcs	.+8      	; 0x1940 <H_PB_U8_PBRead+0x10>
    1938:	82 30       	cpi	r24, 0x02	; 2
    193a:	09 f0       	breq	.+2      	; 0x193e <H_PB_U8_PBRead+0xe>
    193c:	51 c0       	rjmp	.+162    	; 0x19e0 <H_PB_U8_PBRead+0xb0>
    193e:	36 c0       	rjmp	.+108    	; 0x19ac <H_PB_U8_PBRead+0x7c>
	{
	case PB0:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PRESSED)
    1940:	84 e1       	ldi	r24, 0x14	; 20
    1942:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_DIO_Void_GetPinValue>
    1946:	81 30       	cpi	r24, 0x01	; 1
    1948:	09 f0       	breq	.+2      	; 0x194c <H_PB_U8_PBRead+0x1c>
    194a:	4a c0       	rjmp	.+148    	; 0x19e0 <H_PB_U8_PBRead+0xb0>
    194c:	20 eb       	ldi	r18, 0xB0	; 176
    194e:	34 e0       	ldi	r19, 0x04	; 4
    1950:	40 e9       	ldi	r20, 0x90	; 144
    1952:	51 e0       	ldi	r21, 0x01	; 1
    1954:	ca 01       	movw	r24, r20
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <H_PB_U8_PBRead+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195a:	21 50       	subi	r18, 0x01	; 1
    195c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195e:	d1 f7       	brne	.-12     	; 0x1954 <H_PB_U8_PBRead+0x24>
		{
			_delay_ms(PB_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PRESSED)
    1960:	84 e1       	ldi	r24, 0x14	; 20
    1962:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_DIO_Void_GetPinValue>
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	09 f0       	breq	.+2      	; 0x196c <H_PB_U8_PBRead+0x3c>
    196a:	3a c0       	rjmp	.+116    	; 0x19e0 <H_PB_U8_PBRead+0xb0>
			{
				while(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PRESSED);
    196c:	84 e1       	ldi	r24, 0x14	; 20
    196e:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_DIO_Void_GetPinValue>
    1972:	81 30       	cpi	r24, 0x01	; 1
    1974:	d9 f3       	breq	.-10     	; 0x196c <H_PB_U8_PBRead+0x3c>
    1976:	36 c0       	rjmp	.+108    	; 0x19e4 <H_PB_U8_PBRead+0xb4>
				Local_U8_Reading = PRESSED;
			}
		}
		break;
	case PB1:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PRESSED)
    1978:	8e e2       	ldi	r24, 0x2E	; 46
    197a:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_DIO_Void_GetPinValue>
    197e:	81 30       	cpi	r24, 0x01	; 1
    1980:	79 f5       	brne	.+94     	; 0x19e0 <H_PB_U8_PBRead+0xb0>
    1982:	20 eb       	ldi	r18, 0xB0	; 176
    1984:	34 e0       	ldi	r19, 0x04	; 4
    1986:	40 e9       	ldi	r20, 0x90	; 144
    1988:	51 e0       	ldi	r21, 0x01	; 1
    198a:	ca 01       	movw	r24, r20
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	f1 f7       	brne	.-4      	; 0x198c <H_PB_U8_PBRead+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1990:	21 50       	subi	r18, 0x01	; 1
    1992:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1994:	d1 f7       	brne	.-12     	; 0x198a <H_PB_U8_PBRead+0x5a>
		{
			_delay_ms(PB_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PRESSED)
    1996:	8e e2       	ldi	r24, 0x2E	; 46
    1998:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_DIO_Void_GetPinValue>
    199c:	81 30       	cpi	r24, 0x01	; 1
    199e:	01 f5       	brne	.+64     	; 0x19e0 <H_PB_U8_PBRead+0xb0>
			{
				while(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PRESSED);
    19a0:	8e e2       	ldi	r24, 0x2E	; 46
    19a2:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_DIO_Void_GetPinValue>
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	d9 f3       	breq	.-10     	; 0x19a0 <H_PB_U8_PBRead+0x70>
    19aa:	1c c0       	rjmp	.+56     	; 0x19e4 <H_PB_U8_PBRead+0xb4>
				Local_U8_Reading = PRESSED;
			}
		}
		break;
	case PB2:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PRESSED)
    19ac:	8a e2       	ldi	r24, 0x2A	; 42
    19ae:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_DIO_Void_GetPinValue>
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	a9 f4       	brne	.+42     	; 0x19e0 <H_PB_U8_PBRead+0xb0>
    19b6:	20 eb       	ldi	r18, 0xB0	; 176
    19b8:	34 e0       	ldi	r19, 0x04	; 4
    19ba:	40 e9       	ldi	r20, 0x90	; 144
    19bc:	51 e0       	ldi	r21, 0x01	; 1
    19be:	ca 01       	movw	r24, r20
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <H_PB_U8_PBRead+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c4:	21 50       	subi	r18, 0x01	; 1
    19c6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c8:	d1 f7       	brne	.-12     	; 0x19be <H_PB_U8_PBRead+0x8e>
		{
			_delay_ms(PB_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PRESSED)
    19ca:	8a e2       	ldi	r24, 0x2A	; 42
    19cc:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_DIO_Void_GetPinValue>
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	31 f4       	brne	.+12     	; 0x19e0 <H_PB_U8_PBRead+0xb0>
			{
				while(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PRESSED);
    19d4:	8a e2       	ldi	r24, 0x2A	; 42
    19d6:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_DIO_Void_GetPinValue>
    19da:	81 30       	cpi	r24, 0x01	; 1
    19dc:	d9 f3       	breq	.-10     	; 0x19d4 <H_PB_U8_PBRead+0xa4>
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <H_PB_U8_PBRead+0xb4>
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	08 95       	ret
    19e4:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
	default:                                                         break;
	}
	return Local_U8_Reading;
}
    19e6:	08 95       	ret

000019e8 <H_PB_Void_PBInit>:
 */
#include "PB_Interface.h"

void H_PB_Void_PBInit(u8 Copy_U8_PushButton)
{
	switch(Copy_U8_PushButton)
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	51 f0       	breq	.+20     	; 0x1a00 <H_PB_Void_PBInit+0x18>
    19ec:	81 30       	cpi	r24, 0x01	; 1
    19ee:	18 f0       	brcs	.+6      	; 0x19f6 <H_PB_Void_PBInit+0xe>
    19f0:	82 30       	cpi	r24, 0x02	; 2
    19f2:	79 f4       	brne	.+30     	; 0x1a12 <H_PB_Void_PBInit+0x2a>
    19f4:	0a c0       	rjmp	.+20     	; 0x1a0a <H_PB_Void_PBInit+0x22>
	{
	case PB0: M_DIO_Void_SetPinDirection(PUSH_BUTTON_0_PIN,INPUT); break;
    19f6:	84 e1       	ldi	r24, 0x14	; 20
    19f8:	60 e0       	ldi	r22, 0x00	; 0
    19fa:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
    19fe:	08 95       	ret
	case PB1: M_DIO_Void_SetPinDirection(PUSH_BUTTON_1_PIN,INPUT); break;
    1a00:	8e e2       	ldi	r24, 0x2E	; 46
    1a02:	60 e0       	ldi	r22, 0x00	; 0
    1a04:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
    1a08:	08 95       	ret
	case PB2: M_DIO_Void_SetPinDirection(PUSH_BUTTON_2_PIN,INPUT); break;
    1a0a:	8a e2       	ldi	r24, 0x2A	; 42
    1a0c:	60 e0       	ldi	r22, 0x00	; 0
    1a0e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
    1a12:	08 95       	ret

00001a14 <H_LM35_U16_LM35Read>:
{
	M_ADC_Void_ADCInit();
}
u16  H_LM35_U16_LM35Read(void)
{
	u16 Local_U16_Temp = (M_ADC_Void_ADCRead(LM35_PIN) * (u32)500) / 1023;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	0e 94 4a 0b 	call	0x1694	; 0x1694 <M_ADC_Void_ADCRead>
    1a1a:	a0 e0       	ldi	r26, 0x00	; 0
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	24 ef       	ldi	r18, 0xF4	; 244
    1a24:	31 e0       	ldi	r19, 0x01	; 1
    1a26:	40 e0       	ldi	r20, 0x00	; 0
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	0e 94 1f 13 	call	0x263e	; 0x263e <__mulsi3>
    1a2e:	2f ef       	ldi	r18, 0xFF	; 255
    1a30:	33 e0       	ldi	r19, 0x03	; 3
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	50 e0       	ldi	r21, 0x00	; 0
    1a36:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__udivmodsi4>
    1a3a:	82 2f       	mov	r24, r18
    1a3c:	93 2f       	mov	r25, r19
	return Local_U16_Temp;
}
    1a3e:	08 95       	ret

00001a40 <H_LM35_Void_LM35Init>:

#include "LM35_Interface.h"

void H_LM35_Void_LM35Init(void)
{
	M_ADC_Void_ADCInit();
    1a40:	0e 94 2a 0b 	call	0x1654	; 0x1654 <M_ADC_Void_ADCInit>
}
    1a44:	08 95       	ret

00001a46 <H_LED_Void_LedTog>:
	default:   break;
	}
}
void H_LED_Void_LedTog(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1a46:	81 30       	cpi	r24, 0x01	; 1
    1a48:	49 f0       	breq	.+18     	; 0x1a5c <H_LED_Void_LedTog+0x16>
    1a4a:	81 30       	cpi	r24, 0x01	; 1
    1a4c:	18 f0       	brcs	.+6      	; 0x1a54 <H_LED_Void_LedTog+0xe>
    1a4e:	82 30       	cpi	r24, 0x02	; 2
    1a50:	61 f4       	brne	.+24     	; 0x1a6a <H_LED_Void_LedTog+0x24>
    1a52:	08 c0       	rjmp	.+16     	; 0x1a64 <H_LED_Void_LedTog+0x1e>
	{
	case LED0: M_DIO_Void_TogPin(LED0_PIN); break;
    1a54:	80 e2       	ldi	r24, 0x20	; 32
    1a56:	0e 94 4d 0a 	call	0x149a	; 0x149a <M_DIO_Void_TogPin>
    1a5a:	08 95       	ret
	case LED1: M_DIO_Void_TogPin(LED1_PIN); break;
    1a5c:	85 e2       	ldi	r24, 0x25	; 37
    1a5e:	0e 94 4d 0a 	call	0x149a	; 0x149a <M_DIO_Void_TogPin>
    1a62:	08 95       	ret
	case LED2: M_DIO_Void_TogPin(LED2_PIN); break;
    1a64:	8b e2       	ldi	r24, 0x2B	; 43
    1a66:	0e 94 4d 0a 	call	0x149a	; 0x149a <M_DIO_Void_TogPin>
    1a6a:	08 95       	ret

00001a6c <H_LED_Void_LedBlink>:
	default:                                         break;
	}
}
void H_LED_Void_LedBlink(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1a6c:	81 30       	cpi	r24, 0x01	; 1
    1a6e:	c9 f0       	breq	.+50     	; 0x1aa2 <H_LED_Void_LedBlink+0x36>
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	20 f0       	brcs	.+8      	; 0x1a7c <H_LED_Void_LedBlink+0x10>
    1a74:	82 30       	cpi	r24, 0x02	; 2
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <H_LED_Void_LedBlink+0xe>
    1a78:	39 c0       	rjmp	.+114    	; 0x1aec <H_LED_Void_LedBlink+0x80>
    1a7a:	26 c0       	rjmp	.+76     	; 0x1ac8 <H_LED_Void_LedBlink+0x5c>
	{
	case LED0:
		M_DIO_Void_SetPinValue(LED0_PIN,HIGH);
    1a7c:	80 e2       	ldi	r24, 0x20	; 32
    1a7e:	61 e0       	ldi	r22, 0x01	; 1
    1a80:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1a84:	24 ec       	ldi	r18, 0xC4	; 196
    1a86:	39 e0       	ldi	r19, 0x09	; 9
    1a88:	40 e9       	ldi	r20, 0x90	; 144
    1a8a:	51 e0       	ldi	r21, 0x01	; 1
    1a8c:	ca 01       	movw	r24, r20
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <H_LED_Void_LedBlink+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a92:	21 50       	subi	r18, 0x01	; 1
    1a94:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a96:	d1 f7       	brne	.-12     	; 0x1a8c <H_LED_Void_LedBlink+0x20>
		_delay_ms(250);
		M_DIO_Void_SetPinValue(LED0_PIN,LOW);
    1a98:	80 e2       	ldi	r24, 0x20	; 32
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1aa0:	08 95       	ret
		break;
	case LED1:
		M_DIO_Void_SetPinValue(LED1_PIN,HIGH);
    1aa2:	85 e2       	ldi	r24, 0x25	; 37
    1aa4:	61 e0       	ldi	r22, 0x01	; 1
    1aa6:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1aaa:	24 ec       	ldi	r18, 0xC4	; 196
    1aac:	39 e0       	ldi	r19, 0x09	; 9
    1aae:	40 e9       	ldi	r20, 0x90	; 144
    1ab0:	51 e0       	ldi	r21, 0x01	; 1
    1ab2:	ca 01       	movw	r24, r20
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <H_LED_Void_LedBlink+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab8:	21 50       	subi	r18, 0x01	; 1
    1aba:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1abc:	d1 f7       	brne	.-12     	; 0x1ab2 <H_LED_Void_LedBlink+0x46>
		_delay_ms(250);
		M_DIO_Void_SetPinValue(LED1_PIN,LOW);
    1abe:	85 e2       	ldi	r24, 0x25	; 37
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1ac6:	08 95       	ret
		break;
	case LED2:
		M_DIO_Void_SetPinValue(LED2_PIN,HIGH);
    1ac8:	8b e2       	ldi	r24, 0x2B	; 43
    1aca:	61 e0       	ldi	r22, 0x01	; 1
    1acc:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1ad0:	24 ec       	ldi	r18, 0xC4	; 196
    1ad2:	39 e0       	ldi	r19, 0x09	; 9
    1ad4:	40 e9       	ldi	r20, 0x90	; 144
    1ad6:	51 e0       	ldi	r21, 0x01	; 1
    1ad8:	ca 01       	movw	r24, r20
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <H_LED_Void_LedBlink+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ade:	21 50       	subi	r18, 0x01	; 1
    1ae0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae2:	d1 f7       	brne	.-12     	; 0x1ad8 <H_LED_Void_LedBlink+0x6c>
		_delay_ms(250);
		M_DIO_Void_SetPinValue(LED2_PIN,LOW);
    1ae4:	8b e2       	ldi	r24, 0x2B	; 43
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1aec:	08 95       	ret

00001aee <H_LED_Void_LedOff>:
	default:                                          break;
	}
}
void H_LED_Void_LedOff(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1aee:	81 30       	cpi	r24, 0x01	; 1
    1af0:	51 f0       	breq	.+20     	; 0x1b06 <H_LED_Void_LedOff+0x18>
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	18 f0       	brcs	.+6      	; 0x1afc <H_LED_Void_LedOff+0xe>
    1af6:	82 30       	cpi	r24, 0x02	; 2
    1af8:	79 f4       	brne	.+30     	; 0x1b18 <H_LED_Void_LedOff+0x2a>
    1afa:	0a c0       	rjmp	.+20     	; 0x1b10 <H_LED_Void_LedOff+0x22>
	{
	case LED0: M_DIO_Void_SetPinValue(LED0_PIN,LOW); break;
    1afc:	80 e2       	ldi	r24, 0x20	; 32
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1b04:	08 95       	ret
	case LED1: M_DIO_Void_SetPinValue(LED1_PIN,LOW); break;
    1b06:	85 e2       	ldi	r24, 0x25	; 37
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1b0e:	08 95       	ret
	case LED2: M_DIO_Void_SetPinValue(LED2_PIN,LOW); break;
    1b10:	8b e2       	ldi	r24, 0x2B	; 43
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1b18:	08 95       	ret

00001b1a <H_LED_Void_LedOn>:
	default:                                                break;
	}
}
void H_LED_Void_LedOn(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1b1a:	81 30       	cpi	r24, 0x01	; 1
    1b1c:	51 f0       	breq	.+20     	; 0x1b32 <H_LED_Void_LedOn+0x18>
    1b1e:	81 30       	cpi	r24, 0x01	; 1
    1b20:	18 f0       	brcs	.+6      	; 0x1b28 <H_LED_Void_LedOn+0xe>
    1b22:	82 30       	cpi	r24, 0x02	; 2
    1b24:	79 f4       	brne	.+30     	; 0x1b44 <H_LED_Void_LedOn+0x2a>
    1b26:	0a c0       	rjmp	.+20     	; 0x1b3c <H_LED_Void_LedOn+0x22>
	{
	case LED0: M_DIO_Void_SetPinValue(LED0_PIN,HIGH); break;
    1b28:	80 e2       	ldi	r24, 0x20	; 32
    1b2a:	61 e0       	ldi	r22, 0x01	; 1
    1b2c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1b30:	08 95       	ret
	case LED1: M_DIO_Void_SetPinValue(LED1_PIN,HIGH); break;
    1b32:	85 e2       	ldi	r24, 0x25	; 37
    1b34:	61 e0       	ldi	r22, 0x01	; 1
    1b36:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1b3a:	08 95       	ret
	case LED2: M_DIO_Void_SetPinValue(LED2_PIN,HIGH); break;
    1b3c:	8b e2       	ldi	r24, 0x2B	; 43
    1b3e:	61 e0       	ldi	r22, 0x01	; 1
    1b40:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1b44:	08 95       	ret

00001b46 <H_LED_Void_LedInit>:
#include <util/delay.h>
#include "LED_Config.h"

void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	51 f0       	breq	.+20     	; 0x1b5e <H_LED_Void_LedInit+0x18>
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	18 f0       	brcs	.+6      	; 0x1b54 <H_LED_Void_LedInit+0xe>
    1b4e:	82 30       	cpi	r24, 0x02	; 2
    1b50:	79 f4       	brne	.+30     	; 0x1b70 <H_LED_Void_LedInit+0x2a>
    1b52:	0a c0       	rjmp	.+20     	; 0x1b68 <H_LED_Void_LedInit+0x22>
	{
	case LED0: M_DIO_Void_SetPinDirection(LED0_PIN,OUTPUT); break;
    1b54:	80 e2       	ldi	r24, 0x20	; 32
    1b56:	61 e0       	ldi	r22, 0x01	; 1
    1b58:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
    1b5c:	08 95       	ret
	case LED1: M_DIO_Void_SetPinDirection(LED1_PIN,OUTPUT); break;
    1b5e:	85 e2       	ldi	r24, 0x25	; 37
    1b60:	61 e0       	ldi	r22, 0x01	; 1
    1b62:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
    1b66:	08 95       	ret
	case LED2: M_DIO_Void_SetPinDirection(LED2_PIN,OUTPUT); break;
    1b68:	8b e2       	ldi	r24, 0x2B	; 43
    1b6a:	61 e0       	ldi	r22, 0x01	; 1
    1b6c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
    1b70:	08 95       	ret

00001b72 <H_Lcd_Void_LCDWriteCommand>:
	_delay_ms(5);
#endif
}

void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    1b72:	ef 92       	push	r14
    1b74:	ff 92       	push	r15
    1b76:	1f 93       	push	r17
    1b78:	18 2f       	mov	r17, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    1b7a:	85 e1       	ldi	r24, 0x15	; 21
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
    1b82:	61 2f       	mov	r22, r17
    1b84:	62 95       	swap	r22
    1b86:	6f 70       	andi	r22, 0x0F	; 15
    1b88:	61 70       	andi	r22, 0x01	; 1
    1b8a:	8e e0       	ldi	r24, 0x0E	; 14
    1b8c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
    1b90:	61 2f       	mov	r22, r17
    1b92:	62 95       	swap	r22
    1b94:	66 95       	lsr	r22
    1b96:	67 70       	andi	r22, 0x07	; 7
    1b98:	61 70       	andi	r22, 0x01	; 1
    1b9a:	8f e0       	ldi	r24, 0x0F	; 15
    1b9c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
    1ba0:	61 2f       	mov	r22, r17
    1ba2:	62 95       	swap	r22
    1ba4:	66 95       	lsr	r22
    1ba6:	66 95       	lsr	r22
    1ba8:	63 70       	andi	r22, 0x03	; 3
    1baa:	61 70       	andi	r22, 0x01	; 1
    1bac:	80 e1       	ldi	r24, 0x10	; 16
    1bae:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
    1bb2:	61 2f       	mov	r22, r17
    1bb4:	66 1f       	adc	r22, r22
    1bb6:	66 27       	eor	r22, r22
    1bb8:	66 1f       	adc	r22, r22
    1bba:	81 e1       	ldi	r24, 0x11	; 17
    1bbc:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1bc0:	8f e2       	ldi	r24, 0x2F	; 47
    1bc2:	61 e0       	ldi	r22, 0x01	; 1
    1bc4:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1bc8:	0f 2e       	mov	r0, r31
    1bca:	f0 ea       	ldi	r31, 0xA0	; 160
    1bcc:	ef 2e       	mov	r14, r31
    1bce:	ff e0       	ldi	r31, 0x0F	; 15
    1bd0:	ff 2e       	mov	r15, r31
    1bd2:	f0 2d       	mov	r31, r0
    1bd4:	c7 01       	movw	r24, r14
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	f1 f7       	brne	.-4      	; 0x1bd6 <H_Lcd_Void_LCDWriteCommand+0x64>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1bda:	8f e2       	ldi	r24, 0x2F	; 47
    1bdc:	60 e0       	ldi	r22, 0x00	; 0
    1bde:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1be2:	c7 01       	movw	r24, r14
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <H_Lcd_Void_LCDWriteCommand+0x72>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
    1be8:	61 2f       	mov	r22, r17
    1bea:	61 70       	andi	r22, 0x01	; 1
    1bec:	8e e0       	ldi	r24, 0x0E	; 14
    1bee:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
    1bf2:	61 2f       	mov	r22, r17
    1bf4:	66 95       	lsr	r22
    1bf6:	61 70       	andi	r22, 0x01	; 1
    1bf8:	8f e0       	ldi	r24, 0x0F	; 15
    1bfa:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
    1bfe:	61 2f       	mov	r22, r17
    1c00:	66 95       	lsr	r22
    1c02:	66 95       	lsr	r22
    1c04:	61 70       	andi	r22, 0x01	; 1
    1c06:	80 e1       	ldi	r24, 0x10	; 16
    1c08:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
    1c0c:	16 95       	lsr	r17
    1c0e:	16 95       	lsr	r17
    1c10:	16 95       	lsr	r17
    1c12:	11 70       	andi	r17, 0x01	; 1
    1c14:	81 e1       	ldi	r24, 0x11	; 17
    1c16:	61 2f       	mov	r22, r17
    1c18:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1c1c:	8f e2       	ldi	r24, 0x2F	; 47
    1c1e:	61 e0       	ldi	r22, 0x01	; 1
    1c20:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1c24:	c7 01       	movw	r24, r14
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <H_Lcd_Void_LCDWriteCommand+0xb4>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1c2a:	8f e2       	ldi	r24, 0x2F	; 47
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1c32:	80 e2       	ldi	r24, 0x20	; 32
    1c34:	9e e4       	ldi	r25, 0x4E	; 78
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <H_Lcd_Void_LCDWriteCommand+0xc4>
	_delay_ms(5);
#endif
}
    1c3a:	1f 91       	pop	r17
    1c3c:	ff 90       	pop	r15
    1c3e:	ef 90       	pop	r14
    1c40:	08 95       	ret

00001c42 <H_Lcd_Void_LCDGoTo>:
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}

void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <H_Lcd_Void_LCDGoTo+0x6>
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8_Arr [2] = {LCD_R0_COMMAND , LCD_R1_COMMAND};
    1c4c:	90 e8       	ldi	r25, 0x80	; 128
    1c4e:	99 83       	std	Y+1, r25	; 0x01
    1c50:	90 ec       	ldi	r25, 0xC0	; 192
    1c52:	9a 83       	std	Y+2, r25	; 0x02
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
    1c54:	fe 01       	movw	r30, r28
    1c56:	e8 0f       	add	r30, r24
    1c58:	f1 1d       	adc	r31, r1
    1c5a:	81 81       	ldd	r24, Z+1	; 0x01
    1c5c:	86 0f       	add	r24, r22
    1c5e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <H_Lcd_Void_LCDWriteCommand>
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <H_Lcd_Void_LCDClear>:
	}
}

void H_Lcd_Void_LCDClear()
{
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <H_Lcd_Void_LCDWriteCommand>
}
    1c72:	08 95       	ret

00001c74 <H_Lcd_Void_LCDWriteCharacter>:

#endif

}
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    1c74:	ef 92       	push	r14
    1c76:	ff 92       	push	r15
    1c78:	1f 93       	push	r17
    1c7a:	18 2f       	mov	r17, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    1c7c:	85 e1       	ldi	r24, 0x15	; 21
    1c7e:	61 e0       	ldi	r22, 0x01	; 1
    1c80:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
    1c84:	61 2f       	mov	r22, r17
    1c86:	62 95       	swap	r22
    1c88:	6f 70       	andi	r22, 0x0F	; 15
    1c8a:	61 70       	andi	r22, 0x01	; 1
    1c8c:	8e e0       	ldi	r24, 0x0E	; 14
    1c8e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
    1c92:	61 2f       	mov	r22, r17
    1c94:	62 95       	swap	r22
    1c96:	66 95       	lsr	r22
    1c98:	67 70       	andi	r22, 0x07	; 7
    1c9a:	61 70       	andi	r22, 0x01	; 1
    1c9c:	8f e0       	ldi	r24, 0x0F	; 15
    1c9e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
    1ca2:	61 2f       	mov	r22, r17
    1ca4:	62 95       	swap	r22
    1ca6:	66 95       	lsr	r22
    1ca8:	66 95       	lsr	r22
    1caa:	63 70       	andi	r22, 0x03	; 3
    1cac:	61 70       	andi	r22, 0x01	; 1
    1cae:	80 e1       	ldi	r24, 0x10	; 16
    1cb0:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
    1cb4:	61 2f       	mov	r22, r17
    1cb6:	66 1f       	adc	r22, r22
    1cb8:	66 27       	eor	r22, r22
    1cba:	66 1f       	adc	r22, r22
    1cbc:	81 e1       	ldi	r24, 0x11	; 17
    1cbe:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1cc2:	8f e2       	ldi	r24, 0x2F	; 47
    1cc4:	61 e0       	ldi	r22, 0x01	; 1
    1cc6:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1cca:	0f 2e       	mov	r0, r31
    1ccc:	f0 ea       	ldi	r31, 0xA0	; 160
    1cce:	ef 2e       	mov	r14, r31
    1cd0:	ff e0       	ldi	r31, 0x0F	; 15
    1cd2:	ff 2e       	mov	r15, r31
    1cd4:	f0 2d       	mov	r31, r0
    1cd6:	c7 01       	movw	r24, r14
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <H_Lcd_Void_LCDWriteCharacter+0x64>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1cdc:	8f e2       	ldi	r24, 0x2F	; 47
    1cde:	60 e0       	ldi	r22, 0x00	; 0
    1ce0:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1ce4:	c7 01       	movw	r24, r14
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <H_Lcd_Void_LCDWriteCharacter+0x72>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
    1cea:	61 2f       	mov	r22, r17
    1cec:	61 70       	andi	r22, 0x01	; 1
    1cee:	8e e0       	ldi	r24, 0x0E	; 14
    1cf0:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
    1cf4:	61 2f       	mov	r22, r17
    1cf6:	66 95       	lsr	r22
    1cf8:	61 70       	andi	r22, 0x01	; 1
    1cfa:	8f e0       	ldi	r24, 0x0F	; 15
    1cfc:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
    1d00:	61 2f       	mov	r22, r17
    1d02:	66 95       	lsr	r22
    1d04:	66 95       	lsr	r22
    1d06:	61 70       	andi	r22, 0x01	; 1
    1d08:	80 e1       	ldi	r24, 0x10	; 16
    1d0a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
    1d0e:	16 95       	lsr	r17
    1d10:	16 95       	lsr	r17
    1d12:	16 95       	lsr	r17
    1d14:	11 70       	andi	r17, 0x01	; 1
    1d16:	81 e1       	ldi	r24, 0x11	; 17
    1d18:	61 2f       	mov	r22, r17
    1d1a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1d1e:	8f e2       	ldi	r24, 0x2F	; 47
    1d20:	61 e0       	ldi	r22, 0x01	; 1
    1d22:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1d26:	c7 01       	movw	r24, r14
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <H_Lcd_Void_LCDWriteCharacter+0xb4>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1d2c:	8f e2       	ldi	r24, 0x2F	; 47
    1d2e:	60 e0       	ldi	r22, 0x00	; 0
    1d30:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1d34:	80 e2       	ldi	r24, 0x20	; 32
    1d36:	9e e4       	ldi	r25, 0x4E	; 78
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <H_Lcd_Void_LCDWriteCharacter+0xc4>
	_delay_ms(5);
#endif
}
    1d3c:	1f 91       	pop	r17
    1d3e:	ff 90       	pop	r15
    1d40:	ef 90       	pop	r14
    1d42:	08 95       	ret

00001d44 <H_Lcd_Void_LCDWriteNumber>:
void H_Lcd_Void_LCDClear()
{
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
}
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
    1d44:	af 92       	push	r10
    1d46:	bf 92       	push	r11
    1d48:	cf 92       	push	r12
    1d4a:	df 92       	push	r13
    1d4c:	ef 92       	push	r14
    1d4e:	ff 92       	push	r15
    1d50:	0f 93       	push	r16
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	2c 97       	sbiw	r28, 0x0c	; 12
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	6b 01       	movw	r12, r22
    1d68:	7c 01       	movw	r14, r24
	s8 Local_S8_Counter = 0;
	u8 Local_U8_Arr[10] = {0};
	if(Copy_S32_Number < 0)
    1d6a:	99 23       	and	r25, r25
    1d6c:	5c f4       	brge	.+22     	; 0x1d84 <H_Lcd_Void_LCDWriteNumber+0x40>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
    1d6e:	f0 94       	com	r15
    1d70:	e0 94       	com	r14
    1d72:	d0 94       	com	r13
    1d74:	c0 94       	com	r12
    1d76:	c1 1c       	adc	r12, r1
    1d78:	d1 1c       	adc	r13, r1
    1d7a:	e1 1c       	adc	r14, r1
    1d7c:	f1 1c       	adc	r15, r1
		H_Lcd_Void_LCDWriteCharacter('-');
    1d7e:	8d e2       	ldi	r24, 0x2D	; 45
    1d80:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <H_Lcd_Void_LCDWriteCharacter>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
}
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
	s8 Local_S8_Counter = 0;
	u8 Local_U8_Arr[10] = {0};
    1d84:	fe 01       	movw	r30, r28
    1d86:	31 96       	adiw	r30, 0x01	; 1
    1d88:	8a e0       	ldi	r24, 0x0A	; 10
    1d8a:	df 01       	movw	r26, r30
    1d8c:	1d 92       	st	X+, r1
    1d8e:	8a 95       	dec	r24
    1d90:	e9 f7       	brne	.-6      	; 0x1d8c <H_Lcd_Void_LCDWriteNumber+0x48>
    1d92:	00 e0       	ldi	r16, 0x00	; 0
		H_Lcd_Void_LCDWriteCharacter('-');
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
    1d94:	5f 01       	movw	r10, r30
    1d96:	80 2f       	mov	r24, r16
    1d98:	99 27       	eor	r25, r25
    1d9a:	87 fd       	sbrc	r24, 7
    1d9c:	90 95       	com	r25
    1d9e:	f5 01       	movw	r30, r10
    1da0:	e8 0f       	add	r30, r24
    1da2:	f9 1f       	adc	r31, r25
    1da4:	fc 87       	std	Y+12, r31	; 0x0c
    1da6:	eb 87       	std	Y+11, r30	; 0x0b
    1da8:	c7 01       	movw	r24, r14
    1daa:	b6 01       	movw	r22, r12
    1dac:	2a e0       	ldi	r18, 0x0A	; 10
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e0       	ldi	r20, 0x00	; 0
    1db2:	50 e0       	ldi	r21, 0x00	; 0
    1db4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__divmodsi4>
    1db8:	ab 85       	ldd	r26, Y+11	; 0x0b
    1dba:	bc 85       	ldd	r27, Y+12	; 0x0c
    1dbc:	6c 93       	st	X, r22
		Copy_S32_Number                = Copy_S32_Number / 10;
    1dbe:	c7 01       	movw	r24, r14
    1dc0:	b6 01       	movw	r22, r12
    1dc2:	2a e0       	ldi	r18, 0x0A	; 10
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e0       	ldi	r20, 0x00	; 0
    1dc8:	50 e0       	ldi	r21, 0x00	; 0
    1dca:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__divmodsi4>
    1dce:	82 2f       	mov	r24, r18
    1dd0:	93 2f       	mov	r25, r19
    1dd2:	a4 2f       	mov	r26, r20
    1dd4:	b5 2f       	mov	r27, r21
    1dd6:	6c 01       	movw	r12, r24
    1dd8:	7d 01       	movw	r14, r26
		Local_S8_Counter++;
    1dda:	0f 5f       	subi	r16, 0xFF	; 255
	}while(Copy_S32_Number != 0);
    1ddc:	c1 14       	cp	r12, r1
    1dde:	d1 04       	cpc	r13, r1
    1de0:	e1 04       	cpc	r14, r1
    1de2:	f1 04       	cpc	r15, r1
    1de4:	c1 f6       	brne	.-80     	; 0x1d96 <H_Lcd_Void_LCDWriteNumber+0x52>

	while(Local_S8_Counter > 0)
    1de6:	10 16       	cp	r1, r16
    1de8:	94 f4       	brge	.+36     	; 0x1e0e <H_Lcd_Void_LCDWriteNumber+0xca>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
    1dea:	7e 01       	movw	r14, r28
    1dec:	08 94       	sec
    1dee:	e1 1c       	adc	r14, r1
    1df0:	f1 1c       	adc	r15, r1
    1df2:	01 50       	subi	r16, 0x01	; 1
    1df4:	80 2f       	mov	r24, r16
    1df6:	99 27       	eor	r25, r25
    1df8:	87 fd       	sbrc	r24, 7
    1dfa:	90 95       	com	r25
    1dfc:	f7 01       	movw	r30, r14
    1dfe:	e8 0f       	add	r30, r24
    1e00:	f9 1f       	adc	r31, r25
    1e02:	80 81       	ld	r24, Z
    1e04:	80 5d       	subi	r24, 0xD0	; 208
    1e06:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
    1e0a:	10 16       	cp	r1, r16
    1e0c:	94 f3       	brlt	.-28     	; 0x1df2 <H_Lcd_Void_LCDWriteNumber+0xae>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
    1e0e:	2c 96       	adiw	r28, 0x0c	; 12
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	0f 91       	pop	r16
    1e20:	ff 90       	pop	r15
    1e22:	ef 90       	pop	r14
    1e24:	df 90       	pop	r13
    1e26:	cf 90       	pop	r12
    1e28:	bf 90       	pop	r11
    1e2a:	af 90       	pop	r10
    1e2c:	08 95       	ret

00001e2e <H_Lcd_Void_LCDWriteString>:
	_delay_ms(5);
#endif
}

void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	ec 01       	movw	r28, r24
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    1e36:	88 81       	ld	r24, Y
    1e38:	88 23       	and	r24, r24
    1e3a:	51 f0       	breq	.+20     	; 0x1e50 <H_Lcd_Void_LCDWriteString+0x22>
    1e3c:	10 e0       	ldi	r17, 0x00	; 0
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    1e3e:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    1e42:	1f 5f       	subi	r17, 0xFF	; 255
}

void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    1e44:	fe 01       	movw	r30, r28
    1e46:	e1 0f       	add	r30, r17
    1e48:	f1 1d       	adc	r31, r1
    1e4a:	80 81       	ld	r24, Z
    1e4c:	88 23       	and	r24, r24
    1e4e:	b9 f7       	brne	.-18     	; 0x1e3e <H_Lcd_Void_LCDWriteString+0x10>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	1f 91       	pop	r17
    1e56:	08 95       	ret

00001e58 <H_Lcd_Void_LCDInit>:

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    1e58:	8e e0       	ldi	r24, 0x0E	; 14
    1e5a:	61 e0       	ldi	r22, 0x01	; 1
    1e5c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    1e60:	8f e0       	ldi	r24, 0x0F	; 15
    1e62:	61 e0       	ldi	r22, 0x01	; 1
    1e64:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    1e68:	80 e1       	ldi	r24, 0x10	; 16
    1e6a:	61 e0       	ldi	r22, 0x01	; 1
    1e6c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    1e70:	81 e1       	ldi	r24, 0x11	; 17
    1e72:	61 e0       	ldi	r22, 0x01	; 1
    1e74:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    1e78:	85 e1       	ldi	r24, 0x15	; 21
    1e7a:	61 e0       	ldi	r22, 0x01	; 1
    1e7c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RW_PIN,OUTPUT);
    1e80:	86 e1       	ldi	r24, 0x16	; 22
    1e82:	61 e0       	ldi	r22, 0x01	; 1
    1e84:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    1e88:	8f e2       	ldi	r24, 0x2F	; 47
    1e8a:	61 e0       	ldi	r22, 0x01	; 1
    1e8c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinValue(LCD_RW_PIN,LOW);
    1e90:	86 e1       	ldi	r24, 0x16	; 22
    1e92:	60 e0       	ldi	r22, 0x00	; 0
    1e94:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
    1e98:	83 e3       	ldi	r24, 0x33	; 51
    1e9a:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
    1e9e:	82 e3       	ldi	r24, 0x32	; 50
    1ea0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
    1ea4:	88 e2       	ldi	r24, 0x28	; 40
    1ea6:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
    1eaa:	8c e0       	ldi	r24, 0x0C	; 12
    1eac:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
    1eb0:	82 e0       	ldi	r24, 0x02	; 2
    1eb2:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <H_Lcd_Void_LCDWriteCommand>


#endif

}
    1ebc:	08 95       	ret

00001ebe <H_KeyPad_U8_KeyPadRead>:
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C2_PIN,ENABLE);
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C3_PIN,ENABLE);
}

u8   H_KeyPad_U8_KeyPadRead(void)
{
    1ebe:	6f 92       	push	r6
    1ec0:	7f 92       	push	r7
    1ec2:	8f 92       	push	r8
    1ec4:	9f 92       	push	r9
    1ec6:	af 92       	push	r10
    1ec8:	bf 92       	push	r11
    1eca:	cf 92       	push	r12
    1ecc:	df 92       	push	r13
    1ece:	ef 92       	push	r14
    1ed0:	ff 92       	push	r15
    1ed2:	0f 93       	push	r16
    1ed4:	1f 93       	push	r17
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	60 97       	sbiw	r28, 0x10	; 16
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
							  { '*' , '0' , '#' , 'D' }};
#elif KEYPAD_MODEL   ==   KEYPAD_MODEL_B
	u8 Local_U8_Arr [4][4] = {{ '7' , '8' , '9' , '+' },
			                  { '4' , '5' , '6' , '-' },
							  { '1' , '2' , '3' , '*' },
							  { 'C' , '0' , '=' , '/' }};
    1eea:	de 01       	movw	r26, r28
    1eec:	11 96       	adiw	r26, 0x01	; 1
    1eee:	e9 e2       	ldi	r30, 0x29	; 41
    1ef0:	f2 e0       	ldi	r31, 0x02	; 2
    1ef2:	80 e1       	ldi	r24, 0x10	; 16
    1ef4:	01 90       	ld	r0, Z+
    1ef6:	0d 92       	st	X+, r0
    1ef8:	81 50       	subi	r24, 0x01	; 1
    1efa:	e1 f7       	brne	.-8      	; 0x1ef4 <H_KeyPad_U8_KeyPadRead+0x36>
    1efc:	0f 2e       	mov	r0, r31
    1efe:	f0 e3       	ldi	r31, 0x30	; 48
    1f00:	9f 2e       	mov	r9, r31
    1f02:	f0 2d       	mov	r31, r0
    1f04:	cc 24       	eor	r12, r12
    1f06:	dd 24       	eor	r13, r13
	u8 Local_U8_Reading = 48;
	u8 Local_U8_Col     = 0;
	u8 Local_U8_Row     = 0;
	for(Local_U8_Row=KEYPAD_R0_PIN ; Local_U8_Row <= KEYPAD_R3_PIN ; Local_U8_Row++)
	{
		M_DIO_Void_SetPinValue(Local_U8_Row,LOW);
    1f08:	0f 2e       	mov	r0, r31
    1f0a:	f8 e1       	ldi	r31, 0x18	; 24
    1f0c:	8f 2e       	mov	r8, r31
    1f0e:	f0 2d       	mov	r31, r0
    1f10:	00 e9       	ldi	r16, 0x90	; 144
    1f12:	11 e0       	ldi	r17, 0x01	; 1
		for(Local_U8_Col=KEYPAD_C0_PIN ; Local_U8_Col <= KEYPAD_C3_PIN ; Local_U8_Col++)
		{
			if(M_DIO_Void_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED)
    1f14:	80 eb       	ldi	r24, 0xB0	; 176
    1f16:	94 e0       	ldi	r25, 0x04	; 4
    1f18:	b8 2e       	mov	r11, r24
    1f1a:	a9 2e       	mov	r10, r25
			{
				_delay_ms(120);
				if(M_DIO_Void_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED)
				{
					while(M_DIO_Void_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED);
					Local_U8_Reading = Local_U8_Arr[Local_U8_Row - KEYPAD_R0_PIN][Local_U8_Col - KEYPAD_C0_PIN];
    1f1c:	3e 01       	movw	r6, r28
    1f1e:	08 94       	sec
    1f20:	61 1c       	adc	r6, r1
    1f22:	71 1c       	adc	r7, r1
							  { '*' , '0' , '#' , 'D' }};
#elif KEYPAD_MODEL   ==   KEYPAD_MODEL_B
	u8 Local_U8_Arr [4][4] = {{ '7' , '8' , '9' , '+' },
			                  { '4' , '5' , '6' , '-' },
							  { '1' , '2' , '3' , '*' },
							  { 'C' , '0' , '=' , '/' }};
    1f24:	0f 2e       	mov	r0, r31
    1f26:	f1 e2       	ldi	r31, 0x21	; 33
    1f28:	ef 2e       	mov	r14, r31
    1f2a:	f0 2d       	mov	r31, r0
    1f2c:	ec 0c       	add	r14, r12
	u8 Local_U8_Reading = 48;
	u8 Local_U8_Col     = 0;
	u8 Local_U8_Row     = 0;
	for(Local_U8_Row=KEYPAD_R0_PIN ; Local_U8_Row <= KEYPAD_R3_PIN ; Local_U8_Row++)
	{
		M_DIO_Void_SetPinValue(Local_U8_Row,LOW);
    1f2e:	8e 2d       	mov	r24, r14
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1f36:	f8 2c       	mov	r15, r8
		for(Local_U8_Col=KEYPAD_C0_PIN ; Local_U8_Col <= KEYPAD_C3_PIN ; Local_U8_Col++)
		{
			if(M_DIO_Void_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED)
    1f38:	8f 2d       	mov	r24, r15
    1f3a:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_DIO_Void_GetPinValue>
    1f3e:	88 23       	and	r24, r24
    1f40:	f1 f4       	brne	.+60     	; 0x1f7e <H_KeyPad_U8_KeyPadRead+0xc0>
    1f42:	8b 2d       	mov	r24, r11
    1f44:	9a 2d       	mov	r25, r10
    1f46:	f8 01       	movw	r30, r16
    1f48:	31 97       	sbiw	r30, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <H_KeyPad_U8_KeyPadRead+0x8a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4e:	d9 f7       	brne	.-10     	; 0x1f46 <H_KeyPad_U8_KeyPadRead+0x88>
			{
				_delay_ms(120);
				if(M_DIO_Void_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED)
    1f50:	8f 2d       	mov	r24, r15
    1f52:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_DIO_Void_GetPinValue>
    1f56:	88 23       	and	r24, r24
    1f58:	91 f4       	brne	.+36     	; 0x1f7e <H_KeyPad_U8_KeyPadRead+0xc0>
				{
					while(M_DIO_Void_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED);
    1f5a:	8f 2d       	mov	r24, r15
    1f5c:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_DIO_Void_GetPinValue>
    1f60:	88 23       	and	r24, r24
    1f62:	d9 f3       	breq	.-10     	; 0x1f5a <H_KeyPad_U8_KeyPadRead+0x9c>
					Local_U8_Reading = Local_U8_Arr[Local_U8_Row - KEYPAD_R0_PIN][Local_U8_Col - KEYPAD_C0_PIN];
    1f64:	c6 01       	movw	r24, r12
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	f3 01       	movw	r30, r6
    1f70:	e8 0f       	add	r30, r24
    1f72:	f9 1f       	adc	r31, r25
    1f74:	ef 0d       	add	r30, r15
    1f76:	f1 1d       	adc	r31, r1
    1f78:	78 97       	sbiw	r30, 0x18	; 24
    1f7a:	90 80       	ld	r9, Z
    1f7c:	04 c0       	rjmp	.+8      	; 0x1f86 <H_KeyPad_U8_KeyPadRead+0xc8>
	u8 Local_U8_Col     = 0;
	u8 Local_U8_Row     = 0;
	for(Local_U8_Row=KEYPAD_R0_PIN ; Local_U8_Row <= KEYPAD_R3_PIN ; Local_U8_Row++)
	{
		M_DIO_Void_SetPinValue(Local_U8_Row,LOW);
		for(Local_U8_Col=KEYPAD_C0_PIN ; Local_U8_Col <= KEYPAD_C3_PIN ; Local_U8_Col++)
    1f7e:	f3 94       	inc	r15
    1f80:	8c e1       	ldi	r24, 0x1C	; 28
    1f82:	f8 16       	cp	r15, r24
    1f84:	c9 f6       	brne	.-78     	; 0x1f38 <H_KeyPad_U8_KeyPadRead+0x7a>
					break;
				}

			}
		}
		M_DIO_Void_SetPinValue(Local_U8_Row,HIGH);
    1f86:	8e 2d       	mov	r24, r14
    1f88:	61 e0       	ldi	r22, 0x01	; 1
    1f8a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    1f8e:	08 94       	sec
    1f90:	c1 1c       	adc	r12, r1
    1f92:	d1 1c       	adc	r13, r1
							  { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading = 48;
	u8 Local_U8_Col     = 0;
	u8 Local_U8_Row     = 0;
	for(Local_U8_Row=KEYPAD_R0_PIN ; Local_U8_Row <= KEYPAD_R3_PIN ; Local_U8_Row++)
    1f94:	84 e0       	ldi	r24, 0x04	; 4
    1f96:	c8 16       	cp	r12, r24
    1f98:	d1 04       	cpc	r13, r1
    1f9a:	21 f6       	brne	.-120    	; 0x1f24 <H_KeyPad_U8_KeyPadRead+0x66>
			}
		}
		M_DIO_Void_SetPinValue(Local_U8_Row,HIGH);
	}
return Local_U8_Reading;
}
    1f9c:	89 2d       	mov	r24, r9
    1f9e:	60 96       	adiw	r28, 0x10	; 16
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	de bf       	out	0x3e, r29	; 62
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	cd bf       	out	0x3d, r28	; 61
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	1f 91       	pop	r17
    1fb0:	0f 91       	pop	r16
    1fb2:	ff 90       	pop	r15
    1fb4:	ef 90       	pop	r14
    1fb6:	df 90       	pop	r13
    1fb8:	cf 90       	pop	r12
    1fba:	bf 90       	pop	r11
    1fbc:	af 90       	pop	r10
    1fbe:	9f 90       	pop	r9
    1fc0:	8f 90       	pop	r8
    1fc2:	7f 90       	pop	r7
    1fc4:	6f 90       	pop	r6
    1fc6:	08 95       	ret

00001fc8 <H_KeyPad_Void_KeyPadInit>:
#include "KeyPad_Interface.h"
#include "KeyPad_Private.h"

void H_KeyPad_Void_KeyPadInit(void)
{
	M_DIO_Void_SetPinDirection(KEYPAD_R0_PIN,OUTPUT);
    1fc8:	81 e2       	ldi	r24, 0x21	; 33
    1fca:	61 e0       	ldi	r22, 0x01	; 1
    1fcc:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R1_PIN,OUTPUT);
    1fd0:	82 e2       	ldi	r24, 0x22	; 34
    1fd2:	61 e0       	ldi	r22, 0x01	; 1
    1fd4:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R2_PIN,OUTPUT);
    1fd8:	83 e2       	ldi	r24, 0x23	; 35
    1fda:	61 e0       	ldi	r22, 0x01	; 1
    1fdc:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R3_PIN,OUTPUT);
    1fe0:	84 e2       	ldi	r24, 0x24	; 36
    1fe2:	61 e0       	ldi	r22, 0x01	; 1
    1fe4:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinValue(KEYPAD_R0_PIN,HIGH);
    1fe8:	81 e2       	ldi	r24, 0x21	; 33
    1fea:	61 e0       	ldi	r22, 0x01	; 1
    1fec:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
    1ff0:	82 e2       	ldi	r24, 0x22	; 34
    1ff2:	61 e0       	ldi	r22, 0x01	; 1
    1ff4:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
    1ff8:	83 e2       	ldi	r24, 0x23	; 35
    1ffa:	61 e0       	ldi	r22, 0x01	; 1
    1ffc:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);
    2000:	84 e2       	ldi	r24, 0x24	; 36
    2002:	61 e0       	ldi	r22, 0x01	; 1
    2004:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinDirection(KEYPAD_C0_PIN,INPUT);
    2008:	88 e1       	ldi	r24, 0x18	; 24
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C1_PIN,INPUT);
    2010:	89 e1       	ldi	r24, 0x19	; 25
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C2_PIN,INPUT);
    2018:	8a e1       	ldi	r24, 0x1A	; 26
    201a:	60 e0       	ldi	r22, 0x00	; 0
    201c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C3_PIN,INPUT);
    2020:	8b e1       	ldi	r24, 0x1B	; 27
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinPullUpRes(KEYPAD_C0_PIN,ENABLE);
    2028:	88 e1       	ldi	r24, 0x18	; 24
    202a:	61 e0       	ldi	r22, 0x01	; 1
    202c:	0e 94 95 0a 	call	0x152a	; 0x152a <M_DIO_Void_SetPinPullUpRes>
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C1_PIN,ENABLE);
    2030:	89 e1       	ldi	r24, 0x19	; 25
    2032:	61 e0       	ldi	r22, 0x01	; 1
    2034:	0e 94 95 0a 	call	0x152a	; 0x152a <M_DIO_Void_SetPinPullUpRes>
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C2_PIN,ENABLE);
    2038:	8a e1       	ldi	r24, 0x1A	; 26
    203a:	61 e0       	ldi	r22, 0x01	; 1
    203c:	0e 94 95 0a 	call	0x152a	; 0x152a <M_DIO_Void_SetPinPullUpRes>
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C3_PIN,ENABLE);
    2040:	8b e1       	ldi	r24, 0x1B	; 27
    2042:	61 e0       	ldi	r22, 0x01	; 1
    2044:	0e 94 95 0a 	call	0x152a	; 0x152a <M_DIO_Void_SetPinPullUpRes>
}
    2048:	08 95       	ret

0000204a <H_DCMotor_Void_DCMotorStop>:
{
	M_Timer_Void_PWMStart(TIMER1_CHANNEL);
}
void H_DCMotor_Void_DCMotorStop(void)
{
	M_Timer_Void_PWMStop(TIMER1_CHANNEL);
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	0e 94 67 07 	call	0xece	; 0xece <M_Timer_Void_PWMStop>
}
    2050:	08 95       	ret

00002052 <H_DCMotor_Void_DCMotorStart>:
{
	M_Timer_Void_PWMSetDutyCycle(TIMER1_CHANNEL,Copy_U8_MotorSpeed);
}
void H_DCMotor_Void_DCMotorStart(void)
{
	M_Timer_Void_PWMStart(TIMER1_CHANNEL);
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	0e 94 64 07 	call	0xec8	; 0xec8 <M_Timer_Void_PWMStart>
}
    2058:	08 95       	ret

0000205a <H_DCMotor_Void_DCMotorSetSpeed>:
	default:  break;
	}
}
void H_DCMotor_Void_DCMotorSetSpeed(u8 Copy_U8_MotorSpeed)
{
	M_Timer_Void_PWMSetDutyCycle(TIMER1_CHANNEL,Copy_U8_MotorSpeed);
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e0       	ldi	r26, 0x00	; 0
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	bc 01       	movw	r22, r24
    2062:	cd 01       	movw	r24, r26
    2064:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    2068:	ab 01       	movw	r20, r22
    206a:	bc 01       	movw	r22, r24
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	0e 94 22 07 	call	0xe44	; 0xe44 <M_Timer_Void_PWMSetDutyCycle>
}
    2072:	08 95       	ret

00002074 <H_DCMotor_Void_DCMotorSetDirection>:
	M_DIO_Void_SetPinDirection(PC5_PIN,OUTPUT);
	M_DIO_Void_SetPinDirection(PC6_PIN,OUTPUT);
}
void H_DCMotor_Void_DCMotorSetDirection(u8 Copy_MotorDirection)
{
	switch(Copy_MotorDirection)
    2074:	88 23       	and	r24, r24
    2076:	19 f0       	breq	.+6      	; 0x207e <H_DCMotor_Void_DCMotorSetDirection+0xa>
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	91 f4       	brne	.+36     	; 0x20a0 <H_DCMotor_Void_DCMotorSetDirection+0x2c>
    207c:	09 c0       	rjmp	.+18     	; 0x2090 <H_DCMotor_Void_DCMotorSetDirection+0x1c>
	{
	case CW:
		M_DIO_Void_SetPinValue(PC5_PIN,LOW);
    207e:	83 e2       	ldi	r24, 0x23	; 35
    2080:	60 e0       	ldi	r22, 0x00	; 0
    2082:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(PC6_PIN,HIGH);
    2086:	84 e2       	ldi	r24, 0x24	; 36
    2088:	61 e0       	ldi	r22, 0x01	; 1
    208a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    208e:	08 95       	ret
		break;
	case ACW:
		M_DIO_Void_SetPinValue(PC6_PIN,LOW);
    2090:	84 e2       	ldi	r24, 0x24	; 36
    2092:	60 e0       	ldi	r22, 0x00	; 0
    2094:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(PC5_PIN,HIGH);
    2098:	83 e2       	ldi	r24, 0x23	; 35
    209a:	61 e0       	ldi	r22, 0x01	; 1
    209c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
    20a0:	08 95       	ret

000020a2 <H_DCMotor_Void_DCMotorInit>:
#include "Timer_Interface.h"
#include "DIO_Interface.h"

void H_DCMotor_Void_DCMotorInit(void)
{
	M_Timer_Void_PWMInit(TIMER1_CHANNEL);
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	0e 94 6f 07 	call	0xede	; 0xede <M_Timer_Void_PWMInit>
	M_DIO_Void_SetPinDirection(PC5_PIN,OUTPUT);
    20a8:	83 e2       	ldi	r24, 0x23	; 35
    20aa:	61 e0       	ldi	r22, 0x01	; 1
    20ac:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PC6_PIN,OUTPUT);
    20b0:	84 e2       	ldi	r24, 0x24	; 36
    20b2:	61 e0       	ldi	r22, 0x01	; 1
    20b4:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
}
    20b8:	08 95       	ret

000020ba <H_AT24C16A_vid_EEPROMRead>:
	M_I2C_vid_I2CSendByte(Copy_U8_ByteNumber);  /*TO SEND BYTE NUMBER*/
	M_I2C_vid_I2CSendByte(Copy_U8_Data);  /*TO SEND Data       */
	M_I2C_vid_I2CStopCondition();
}
u8 H_AT24C16A_vid_EEPROMRead(u8 Copy_U8_PageNumber, u8 Copy_U8_ByteNumber)
{
    20ba:	0f 93       	push	r16
    20bc:	1f 93       	push	r17
    20be:	18 2f       	mov	r17, r24
    20c0:	06 2f       	mov	r16, r22
	u8 Local_U8_Data;
	M_I2C_vid_I2CStartCondition();
    20c2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <M_I2C_vid_I2CStartCondition>
	M_I2C_vid_I2CSendSlaveAddressWrite(0x50 | Copy_U8_PageNumber);
    20c6:	10 65       	ori	r17, 0x50	; 80
    20c8:	81 2f       	mov	r24, r17
    20ca:	0e 94 f9 07 	call	0xff2	; 0xff2 <M_I2C_vid_I2CSendSlaveAddressWrite>
	M_I2C_vid_I2CSendByte(Copy_U8_ByteNumber);
    20ce:	80 2f       	mov	r24, r16
    20d0:	0e 94 13 08 	call	0x1026	; 0x1026 <M_I2C_vid_I2CSendByte>
	M_I2C_vid_I2CRepeatCondition();
    20d4:	0e 94 ed 07 	call	0xfda	; 0xfda <M_I2C_vid_I2CRepeatCondition>
	M_I2C_vid_I2CSendSlaveAddressRead(0x50 | Copy_U8_PageNumber);
    20d8:	81 2f       	mov	r24, r17
    20da:	0e 94 04 08 	call	0x1008	; 0x1008 <M_I2C_vid_I2CSendSlaveAddressRead>
	Local_U8_Data = M_I2C_vid_I2CReadByte();
    20de:	0e 94 36 08 	call	0x106c	; 0x106c <M_I2C_vid_I2CReadByte>
    20e2:	18 2f       	mov	r17, r24
	M_I2C_vid_I2CStopCondition();
    20e4:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <M_I2C_vid_I2CStopCondition>
	return Local_U8_Data;
}
    20e8:	81 2f       	mov	r24, r17
    20ea:	1f 91       	pop	r17
    20ec:	0f 91       	pop	r16
    20ee:	08 95       	ret

000020f0 <H_AT24C16A_vid_EEPROMWrite>:
void H_AT24C16A_vid_EEPROMInit(void)
{
	M_I2C_vid_I2CInit();
}
void H_AT24C16A_vid_EEPROMWrite(u8 Copy_U8_PageNumber, u8 Copy_U8_ByteNumber, u8 Copy_U8_Data)
{
    20f0:	ff 92       	push	r15
    20f2:	0f 93       	push	r16
    20f4:	1f 93       	push	r17
    20f6:	18 2f       	mov	r17, r24
    20f8:	06 2f       	mov	r16, r22
    20fa:	f4 2e       	mov	r15, r20
	M_I2C_vid_I2CStartCondition();
    20fc:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <M_I2C_vid_I2CStartCondition>
	M_I2C_vid_I2CSendSlaveAddressWrite(0x50 | Copy_U8_PageNumber);
    2100:	81 2f       	mov	r24, r17
    2102:	80 65       	ori	r24, 0x50	; 80
    2104:	0e 94 f9 07 	call	0xff2	; 0xff2 <M_I2C_vid_I2CSendSlaveAddressWrite>
	M_I2C_vid_I2CSendByte(Copy_U8_ByteNumber);  /*TO SEND BYTE NUMBER*/
    2108:	80 2f       	mov	r24, r16
    210a:	0e 94 13 08 	call	0x1026	; 0x1026 <M_I2C_vid_I2CSendByte>
	M_I2C_vid_I2CSendByte(Copy_U8_Data);  /*TO SEND Data       */
    210e:	8f 2d       	mov	r24, r15
    2110:	0e 94 13 08 	call	0x1026	; 0x1026 <M_I2C_vid_I2CSendByte>
	M_I2C_vid_I2CStopCondition();
    2114:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <M_I2C_vid_I2CStopCondition>
}
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	ff 90       	pop	r15
    211e:	08 95       	ret

00002120 <H_AT24C16A_vid_EEPROMInit>:

#include <AT24C16A/AT24C16A_interface.h>

void H_AT24C16A_vid_EEPROMInit(void)
{
	M_I2C_vid_I2CInit();
    2120:	0e 94 ca 07 	call	0xf94	; 0xf94 <M_I2C_vid_I2CInit>
}
    2124:	08 95       	ret

00002126 <A_Main_LCDPWMDrawer>:
	M_Timer_Void_PWMStart(TIMER0_CHANNEL);
	A_Main_LCDPWMDrawer(Local_U8_NeededDutyCycle, Local_U8_NeededNumOfWaves);
	M_DIO_Void_SetPinValue(PC7_PIN, LOW);
}
void A_Main_LCDPWMDrawer(u8 Copy_U8_DutyCycle, u8 Copy_U8_NumOfWaves)
{
    2126:	9f 92       	push	r9
    2128:	af 92       	push	r10
    212a:	bf 92       	push	r11
    212c:	cf 92       	push	r12
    212e:	df 92       	push	r13
    2130:	ef 92       	push	r14
    2132:	ff 92       	push	r15
    2134:	0f 93       	push	r16
    2136:	1f 93       	push	r17
    2138:	f8 2e       	mov	r15, r24
    213a:	06 2f       	mov	r16, r22
	u8 Local_U8_HighPeriod = 0;
	u8 Local_U8_LowPeriod  = 0;
	u8 Local_U8_Cursor = 0;
	u8 Local_U8_NumOfCharacter = 16 / Copy_U8_NumOfWaves;
    213c:	80 e1       	ldi	r24, 0x10	; 16
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	70 e0       	ldi	r23, 0x00	; 0
    2142:	0e 94 4a 13 	call	0x2694	; 0x2694 <__divmodhi4>
    2146:	26 2f       	mov	r18, r22

	Local_U8_HighPeriod = (Copy_U8_DutyCycle * Local_U8_NumOfCharacter) / 100;
    2148:	6f 9d       	mul	r22, r15
    214a:	c0 01       	movw	r24, r0
    214c:	11 24       	eor	r1, r1
    214e:	64 e6       	ldi	r22, 0x64	; 100
    2150:	70 e0       	ldi	r23, 0x00	; 0
    2152:	0e 94 4a 13 	call	0x2694	; 0x2694 <__divmodhi4>
    2156:	16 2f       	mov	r17, r22
    2158:	b6 2e       	mov	r11, r22
	Local_U8_LowPeriod  = Local_U8_NumOfCharacter- Local_U8_HighPeriod;
	if(Local_U8_HighPeriod == 0 || Local_U8_LowPeriod == 0)
    215a:	66 23       	and	r22, r22
    215c:	19 f0       	breq	.+6      	; 0x2164 <A_Main_LCDPWMDrawer+0x3e>
	u8 Local_U8_LowPeriod  = 0;
	u8 Local_U8_Cursor = 0;
	u8 Local_U8_NumOfCharacter = 16 / Copy_U8_NumOfWaves;

	Local_U8_HighPeriod = (Copy_U8_DutyCycle * Local_U8_NumOfCharacter) / 100;
	Local_U8_LowPeriod  = Local_U8_NumOfCharacter- Local_U8_HighPeriod;
    215e:	e2 2e       	mov	r14, r18
    2160:	e6 1a       	sub	r14, r22
	if(Local_U8_HighPeriod == 0 || Local_U8_LowPeriod == 0)
    2162:	89 f5       	brne	.+98     	; 0x21c6 <A_Main_LCDPWMDrawer+0xa0>
	{
		H_Lcd_Void_LCDClear();
    2164:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <H_Lcd_Void_LCDClear>
		H_Lcd_Void_LCDWriteString("Invalid required");
    2168:	80 e6       	ldi	r24, 0x60	; 96
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(1,0);
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	60 e0       	ldi	r22, 0x00	; 0
    2174:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString("number of waves");
    2178:	81 e7       	ldi	r24, 0x71	; 113
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <H_Lcd_Void_LCDWriteString>
    2180:	20 e2       	ldi	r18, 0x20	; 32
    2182:	3e e4       	ldi	r19, 0x4E	; 78
    2184:	40 e9       	ldi	r20, 0x90	; 144
    2186:	51 e0       	ldi	r21, 0x01	; 1
    2188:	ca 01       	movw	r24, r20
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <A_Main_LCDPWMDrawer+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218e:	21 50       	subi	r18, 0x01	; 1
    2190:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2192:	d1 f7       	brne	.-12     	; 0x2188 <A_Main_LCDPWMDrawer+0x62>
		_delay_ms(2000);
		H_Lcd_Void_LCDClear();
    2194:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <H_Lcd_Void_LCDClear>
		H_Lcd_Void_LCDWriteString("Enter lower");
    2198:	81 e8       	ldi	r24, 0x81	; 129
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(1,0);
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	60 e0       	ldi	r22, 0x00	; 0
    21a4:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString("number of waves");
    21a8:	81 e7       	ldi	r24, 0x71	; 113
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <H_Lcd_Void_LCDWriteString>
    21b0:	20 e2       	ldi	r18, 0x20	; 32
    21b2:	3e e4       	ldi	r19, 0x4E	; 78
    21b4:	40 e9       	ldi	r20, 0x90	; 144
    21b6:	51 e0       	ldi	r21, 0x01	; 1
    21b8:	ca 01       	movw	r24, r20
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	f1 f7       	brne	.-4      	; 0x21ba <A_Main_LCDPWMDrawer+0x94>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21be:	21 50       	subi	r18, 0x01	; 1
    21c0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c2:	d1 f7       	brne	.-12     	; 0x21b8 <A_Main_LCDPWMDrawer+0x92>
    21c4:	67 c0       	rjmp	.+206    	; 0x2294 <A_Main_LCDPWMDrawer+0x16e>
		_delay_ms(2000);
	}
	else
	{
		H_Lcd_Void_LCDClear();
    21c6:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <H_Lcd_Void_LCDClear>
		H_Lcd_Void_LCDWriteString("Frequancy:16 MHZ");
    21ca:	8d e8       	ldi	r24, 0x8D	; 141
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <H_Lcd_Void_LCDWriteString>
    21d2:	28 e9       	ldi	r18, 0x98	; 152
    21d4:	3a e3       	ldi	r19, 0x3A	; 58
    21d6:	40 e9       	ldi	r20, 0x90	; 144
    21d8:	51 e0       	ldi	r21, 0x01	; 1
    21da:	ca 01       	movw	r24, r20
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	f1 f7       	brne	.-4      	; 0x21dc <A_Main_LCDPWMDrawer+0xb6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e0:	21 50       	subi	r18, 0x01	; 1
    21e2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e4:	d1 f7       	brne	.-12     	; 0x21da <A_Main_LCDPWMDrawer+0xb4>
		_delay_ms(1500);
		H_Lcd_Void_LCDClear();
    21e6:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <H_Lcd_Void_LCDClear>
		H_Lcd_Void_LCDWriteString("Duty cycle : ");
    21ea:	8e e9       	ldi	r24, 0x9E	; 158
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDWriteNumber(Copy_U8_DutyCycle);
    21f2:	6f 2d       	mov	r22, r15
    21f4:	70 e0       	ldi	r23, 0x00	; 0
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <H_Lcd_Void_LCDWriteNumber>
		H_Lcd_Void_LCDWriteCharacter('%');
    21fe:	85 e2       	ldi	r24, 0x25	; 37
    2200:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <H_Lcd_Void_LCDWriteCharacter>
    2204:	28 e9       	ldi	r18, 0x98	; 152
    2206:	3a e3       	ldi	r19, 0x3A	; 58
    2208:	40 e9       	ldi	r20, 0x90	; 144
    220a:	51 e0       	ldi	r21, 0x01	; 1
    220c:	ca 01       	movw	r24, r20
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <A_Main_LCDPWMDrawer+0xe8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2212:	21 50       	subi	r18, 0x01	; 1
    2214:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2216:	d1 f7       	brne	.-12     	; 0x220c <A_Main_LCDPWMDrawer+0xe6>
		_delay_ms(1500);
		H_Lcd_Void_LCDClear();
    2218:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <H_Lcd_Void_LCDClear>
		for(u8 Local_U8_CountForWaves = Copy_U8_NumOfWaves; Local_U8_CountForWaves > 0; Local_U8_CountForWaves--)
    221c:	00 23       	and	r16, r16
    221e:	91 f1       	breq	.+100    	; 0x2284 <A_Main_LCDPWMDrawer+0x15e>
	M_Timer_Void_PWMStart(TIMER0_CHANNEL);
	A_Main_LCDPWMDrawer(Local_U8_NeededDutyCycle, Local_U8_NeededNumOfWaves);
	M_DIO_Void_SetPinValue(PC7_PIN, LOW);
}
void A_Main_LCDPWMDrawer(u8 Copy_U8_DutyCycle, u8 Copy_U8_NumOfWaves)
{
    2220:	a1 2e       	mov	r10, r17
    2222:	81 2f       	mov	r24, r17
    2224:	8f 5f       	subi	r24, 0xFF	; 255
    2226:	98 2e       	mov	r9, r24
    2228:	9e 0c       	add	r9, r14
    222a:	d0 2e       	mov	r13, r16
    222c:	cc 24       	eor	r12, r12
		H_Lcd_Void_LCDWriteString("Duty cycle : ");
		H_Lcd_Void_LCDWriteNumber(Copy_U8_DutyCycle);
		H_Lcd_Void_LCDWriteCharacter('%');
		_delay_ms(1500);
		H_Lcd_Void_LCDClear();
		for(u8 Local_U8_CountForWaves = Copy_U8_NumOfWaves; Local_U8_CountForWaves > 0; Local_U8_CountForWaves--)
    222e:	ff 24       	eor	r15, r15
    2230:	26 c0       	rjmp	.+76     	; 0x227e <A_Main_LCDPWMDrawer+0x158>
		{
				u8 Local_U8_CountForHigh = 0;
				u8 Local_U8_CountForLow  = 0;
			for(; Local_U8_CountForHigh < Local_U8_HighPeriod; Local_U8_CountForHigh++)
			{
				H_Lcd_Void_LCDGoTo(0, Local_U8_Cursor);
    2232:	8f 2d       	mov	r24, r15
    2234:	60 2f       	mov	r22, r16
    2236:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteCharacter('_');
    223a:	8f e5       	ldi	r24, 0x5F	; 95
    223c:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <H_Lcd_Void_LCDWriteCharacter>
				Local_U8_Cursor++;
    2240:	0f 5f       	subi	r16, 0xFF	; 255
		H_Lcd_Void_LCDClear();
		for(u8 Local_U8_CountForWaves = Copy_U8_NumOfWaves; Local_U8_CountForWaves > 0; Local_U8_CountForWaves--)
		{
				u8 Local_U8_CountForHigh = 0;
				u8 Local_U8_CountForLow  = 0;
			for(; Local_U8_CountForHigh < Local_U8_HighPeriod; Local_U8_CountForHigh++)
    2242:	1f 5f       	subi	r17, 0xFF	; 255
    2244:	1b 15       	cp	r17, r11
    2246:	a8 f3       	brcs	.-22     	; 0x2232 <A_Main_LCDPWMDrawer+0x10c>
    2248:	0a 2d       	mov	r16, r10
    224a:	1f 2d       	mov	r17, r15
				H_Lcd_Void_LCDWriteCharacter('_');
				Local_U8_Cursor++;
			}
			for(; Local_U8_CountForLow < Local_U8_LowPeriod; Local_U8_CountForLow++)
			{
				H_Lcd_Void_LCDGoTo(1, Local_U8_Cursor);
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	60 2f       	mov	r22, r16
    2250:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <H_Lcd_Void_LCDGoTo>
				if(Local_U8_CountForLow == 0)
    2254:	11 23       	and	r17, r17
    2256:	21 f4       	brne	.+8      	; 0x2260 <A_Main_LCDPWMDrawer+0x13a>
					H_Lcd_Void_LCDWriteCharacter('L');
    2258:	8c e4       	ldi	r24, 0x4C	; 76
    225a:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <H_Lcd_Void_LCDWriteCharacter>
    225e:	03 c0       	rjmp	.+6      	; 0x2266 <A_Main_LCDPWMDrawer+0x140>
				else
					H_Lcd_Void_LCDWriteCharacter('_');
    2260:	8f e5       	ldi	r24, 0x5F	; 95
    2262:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <H_Lcd_Void_LCDWriteCharacter>
					Local_U8_Cursor++;
    2266:	0f 5f       	subi	r16, 0xFF	; 255
			{
				H_Lcd_Void_LCDGoTo(0, Local_U8_Cursor);
				H_Lcd_Void_LCDWriteCharacter('_');
				Local_U8_Cursor++;
			}
			for(; Local_U8_CountForLow < Local_U8_LowPeriod; Local_U8_CountForLow++)
    2268:	1f 5f       	subi	r17, 0xFF	; 255
    226a:	1e 15       	cp	r17, r14
    226c:	78 f3       	brcs	.-34     	; 0x224c <A_Main_LCDPWMDrawer+0x126>
					H_Lcd_Void_LCDWriteCharacter('L');
				else
					H_Lcd_Void_LCDWriteCharacter('_');
					Local_U8_Cursor++;
			}
			H_Lcd_Void_LCDWriteCharacter('|');
    226e:	8c e7       	ldi	r24, 0x7C	; 124
    2270:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <H_Lcd_Void_LCDWriteCharacter>
		H_Lcd_Void_LCDWriteString("Duty cycle : ");
		H_Lcd_Void_LCDWriteNumber(Copy_U8_DutyCycle);
		H_Lcd_Void_LCDWriteCharacter('%');
		_delay_ms(1500);
		H_Lcd_Void_LCDClear();
		for(u8 Local_U8_CountForWaves = Copy_U8_NumOfWaves; Local_U8_CountForWaves > 0; Local_U8_CountForWaves--)
    2274:	da 94       	dec	r13
    2276:	a9 0c       	add	r10, r9
    2278:	dd 20       	and	r13, r13
    227a:	21 f0       	breq	.+8      	; 0x2284 <A_Main_LCDPWMDrawer+0x15e>
    227c:	c9 0c       	add	r12, r9
    227e:	0c 2d       	mov	r16, r12
    2280:	1f 2d       	mov	r17, r15
    2282:	d7 cf       	rjmp	.-82     	; 0x2232 <A_Main_LCDPWMDrawer+0x10c>
					Local_U8_Cursor++;
			}
			H_Lcd_Void_LCDWriteCharacter('|');
			Local_U8_Cursor++;
		}
		while(!(M_DIO_Void_GetPinValue(PD2_PIN) == 1));
    2284:	8a e2       	ldi	r24, 0x2A	; 42
    2286:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_DIO_Void_GetPinValue>
    228a:	81 30       	cpi	r24, 0x01	; 1
    228c:	d9 f7       	brne	.-10     	; 0x2284 <A_Main_LCDPWMDrawer+0x15e>
		M_Timer_Void_PWMStop(TIMER0_CHANNEL);
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	0e 94 67 07 	call	0xece	; 0xece <M_Timer_Void_PWMStop>
	}
}
    2294:	1f 91       	pop	r17
    2296:	0f 91       	pop	r16
    2298:	ff 90       	pop	r15
    229a:	ef 90       	pop	r14
    229c:	df 90       	pop	r13
    229e:	cf 90       	pop	r12
    22a0:	bf 90       	pop	r11
    22a2:	af 90       	pop	r10
    22a4:	9f 90       	pop	r9
    22a6:	08 95       	ret

000022a8 <A_Main_void_KeypadAsSource>:
	M_Timer_Void_PWMStart(TIMER0_CHANNEL);
	A_Main_LCDPWMDrawer(Local_U8_DutyCycle, NUM_OF_WAVES);
	M_DIO_Void_SetPinValue(PA1_PIN, LOW);
}
void A_Main_void_KeypadAsSource()
{
    22a8:	ef 92       	push	r14
    22aa:	ff 92       	push	r15
    22ac:	0f 93       	push	r16
    22ae:	1f 93       	push	r17
	u8 Local_U8_Reading = 0;
	u8 Local_U8_NeededNumOfWaves = 0;
	u8 Local_U8_NeededDutyCycle  = 0;
	M_DIO_Void_SetPinValue(PC7_PIN, HIGH);
    22b0:	85 e2       	ldi	r24, 0x25	; 37
    22b2:	61 e0       	ldi	r22, 0x01	; 1
    22b4:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	H_Lcd_Void_LCDClear();
    22b8:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDWriteString("Needed waves:");
    22bc:	8c ea       	ldi	r24, 0xAC	; 172
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <H_Lcd_Void_LCDWriteString>
	while(!(Local_U8_NeededNumOfWaves = H_KeyPad_U8_KeyPadRead() - 48));
    22c4:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <H_KeyPad_U8_KeyPadRead>
    22c8:	0f 2e       	mov	r0, r31
    22ca:	f0 ed       	ldi	r31, 0xD0	; 208
    22cc:	ff 2e       	mov	r15, r31
    22ce:	f0 2d       	mov	r31, r0
    22d0:	f8 0e       	add	r15, r24
    22d2:	c1 f3       	breq	.-16     	; 0x22c4 <A_Main_void_KeypadAsSource+0x1c>
	H_Lcd_Void_LCDWriteNumber(Local_U8_NeededNumOfWaves);
    22d4:	6f 2d       	mov	r22, r15
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <H_Lcd_Void_LCDWriteNumber>
	H_Lcd_Void_LCDGoTo(1,0);
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	60 e0       	ldi	r22, 0x00	; 0
    22e4:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString("Duty cycle:");
    22e8:	8a eb       	ldi	r24, 0xBA	; 186
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <H_Lcd_Void_LCDWriteString>
	while(!(Local_U8_NeededDutyCycle = H_KeyPad_U8_KeyPadRead() - 48));
    22f0:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <H_KeyPad_U8_KeyPadRead>
    22f4:	08 2f       	mov	r16, r24
    22f6:	00 53       	subi	r16, 0x30	; 48
    22f8:	d9 f3       	breq	.-10     	; 0x22f0 <A_Main_void_KeypadAsSource+0x48>
    22fa:	e0 2e       	mov	r14, r16
	H_Lcd_Void_LCDWriteNumber(Local_U8_NeededDutyCycle);
    22fc:	60 2f       	mov	r22, r16
    22fe:	70 e0       	ldi	r23, 0x00	; 0
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <H_Lcd_Void_LCDWriteNumber>
	while((Local_U8_Reading = H_KeyPad_U8_KeyPadRead()) == 48);
    2308:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <H_KeyPad_U8_KeyPadRead>
    230c:	18 2f       	mov	r17, r24
    230e:	80 33       	cpi	r24, 0x30	; 48
    2310:	d9 f3       	breq	.-10     	; 0x2308 <A_Main_void_KeypadAsSource+0x60>
	if(Local_U8_Reading != 'C')
    2312:	83 34       	cpi	r24, 0x43	; 67
    2314:	89 f0       	breq	.+34     	; 0x2338 <A_Main_void_KeypadAsSource+0x90>
	{
		H_Lcd_Void_LCDWriteNumber(Local_U8_Reading - 48);
    2316:	68 2f       	mov	r22, r24
    2318:	70 e0       	ldi	r23, 0x00	; 0
    231a:	60 53       	subi	r22, 0x30	; 48
    231c:	70 40       	sbci	r23, 0x00	; 0
    231e:	88 27       	eor	r24, r24
    2320:	77 fd       	sbrc	r23, 7
    2322:	80 95       	com	r24
    2324:	98 2f       	mov	r25, r24
    2326:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <H_Lcd_Void_LCDWriteNumber>
		Local_U8_NeededDutyCycle = (Local_U8_NeededDutyCycle * 10) + (Local_U8_Reading - 48);
    232a:	8a e0       	ldi	r24, 0x0A	; 10
    232c:	e8 9e       	mul	r14, r24
    232e:	c0 01       	movw	r24, r0
    2330:	11 24       	eor	r1, r1
    2332:	80 53       	subi	r24, 0x30	; 48
    2334:	08 2f       	mov	r16, r24
    2336:	01 0f       	add	r16, r17
	}
	while((Local_U8_Reading = H_KeyPad_U8_KeyPadRead()) != 'C');
    2338:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <H_KeyPad_U8_KeyPadRead>
    233c:	83 34       	cpi	r24, 0x43	; 67
    233e:	e1 f7       	brne	.-8      	; 0x2338 <A_Main_void_KeypadAsSource+0x90>
	M_Timer_Void_PWMSetDutyCycle(TIMER0_CHANNEL, Local_U8_NeededDutyCycle);
    2340:	60 2f       	mov	r22, r16
    2342:	70 e0       	ldi	r23, 0x00	; 0
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    234c:	ab 01       	movw	r20, r22
    234e:	bc 01       	movw	r22, r24
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	0e 94 22 07 	call	0xe44	; 0xe44 <M_Timer_Void_PWMSetDutyCycle>
	M_Timer_Void_PWMStart(TIMER0_CHANNEL);
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	0e 94 64 07 	call	0xec8	; 0xec8 <M_Timer_Void_PWMStart>
	A_Main_LCDPWMDrawer(Local_U8_NeededDutyCycle, Local_U8_NeededNumOfWaves);
    235c:	80 2f       	mov	r24, r16
    235e:	6f 2d       	mov	r22, r15
    2360:	0e 94 93 10 	call	0x2126	; 0x2126 <A_Main_LCDPWMDrawer>
	M_DIO_Void_SetPinValue(PC7_PIN, LOW);
    2364:	85 e2       	ldi	r24, 0x25	; 37
    2366:	60 e0       	ldi	r22, 0x00	; 0
    2368:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
}
    236c:	1f 91       	pop	r17
    236e:	0f 91       	pop	r16
    2370:	ff 90       	pop	r15
    2372:	ef 90       	pop	r14
    2374:	08 95       	ret

00002376 <A_Main_void_MineMicro>:


//FIRST MODE
void A_Main_void_MineMicro()
{
	M_DIO_Void_SetPinValue(PA2_PIN, HIGH);
    2376:	8c e0       	ldi	r24, 0x0C	; 12
    2378:	61 e0       	ldi	r22, 0x01	; 1
    237a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	u8 Local_U8_DutyCycle = 40;
	M_Timer_Void_PWMSetDutyCycle(TIMER0_CHANNEL, Local_U8_DutyCycle);
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	60 e2       	ldi	r22, 0x20	; 32
    2386:	72 e4       	ldi	r23, 0x42	; 66
    2388:	0e 94 22 07 	call	0xe44	; 0xe44 <M_Timer_Void_PWMSetDutyCycle>
	M_Timer_Void_PWMStart(TIMER0_CHANNEL);
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	0e 94 64 07 	call	0xec8	; 0xec8 <M_Timer_Void_PWMStart>
	A_Main_LCDPWMDrawer(Local_U8_DutyCycle, NUM_OF_WAVES);
    2392:	88 e2       	ldi	r24, 0x28	; 40
    2394:	62 e0       	ldi	r22, 0x02	; 2
    2396:	0e 94 93 10 	call	0x2126	; 0x2126 <A_Main_LCDPWMDrawer>
	M_DIO_Void_SetPinValue(PA2_PIN, LOW);
    239a:	8c e0       	ldi	r24, 0x0C	; 12
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
}
    23a2:	08 95       	ret

000023a4 <A_Main_void_PoteniAsSource>:
	A_Main_LCDPWMDrawer(Local_U8_ExtMCDutyCycle, Local_U8_NeededNumOfWaves);
	M_UART_Void_UARTSend(3);
}
//THIRD MODE
void A_Main_void_PoteniAsSource()
{
    23a4:	ef 92       	push	r14
    23a6:	ff 92       	push	r15
    23a8:	0f 93       	push	r16
    23aa:	1f 93       	push	r17
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
	u16 Local_U16_ADCReading = 0;
	f32 Local_U8_DutyCycle = 0;
	M_DIO_Void_SetPinValue(PA1_PIN, HIGH);
    23b0:	8b e0       	ldi	r24, 0x0B	; 11
    23b2:	61 e0       	ldi	r22, 0x01	; 1
    23b4:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
	M_ADC_Void_ADCInit();
    23b8:	0e 94 2a 0b 	call	0x1654	; 0x1654 <M_ADC_Void_ADCInit>
	Local_U16_ADCReading = M_ADC_Void_ADCRead(ADC_CHANNEL_0);
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	0e 94 4a 0b 	call	0x1694	; 0x1694 <M_ADC_Void_ADCRead>
    23c2:	ec 01       	movw	r28, r24
	H_Lcd_Void_LCDClear();
    23c4:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDWriteString("Reading : ");
    23c8:	86 ec       	ldi	r24, 0xC6	; 198
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDWriteNumber(Local_U16_ADCReading);
    23d0:	be 01       	movw	r22, r28
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <H_Lcd_Void_LCDWriteNumber>
    23da:	20 e2       	ldi	r18, 0x20	; 32
    23dc:	3e e4       	ldi	r19, 0x4E	; 78
    23de:	40 e9       	ldi	r20, 0x90	; 144
    23e0:	51 e0       	ldi	r21, 0x01	; 1
    23e2:	ca 01       	movw	r24, r20
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	f1 f7       	brne	.-4      	; 0x23e4 <A_Main_void_PoteniAsSource+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e8:	21 50       	subi	r18, 0x01	; 1
    23ea:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ec:	d1 f7       	brne	.-12     	; 0x23e2 <A_Main_void_PoteniAsSource+0x3e>
	_delay_ms(2000);
	Local_U8_DutyCycle = (Local_U16_ADCReading / 1024.0) * 100;
    23ee:	be 01       	movw	r22, r28
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e8       	ldi	r20, 0x80	; 128
    23fe:	5a e3       	ldi	r21, 0x3A	; 58
    2400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	48 ec       	ldi	r20, 0xC8	; 200
    240a:	52 e4       	ldi	r21, 0x42	; 66
    240c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2410:	7b 01       	movw	r14, r22
    2412:	8c 01       	movw	r16, r24
	M_Timer_Void_PWMSetDutyCycle(TIMER0_CHANNEL, Local_U8_DutyCycle);
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	b8 01       	movw	r22, r16
    2418:	a7 01       	movw	r20, r14
    241a:	0e 94 22 07 	call	0xe44	; 0xe44 <M_Timer_Void_PWMSetDutyCycle>
	M_Timer_Void_PWMStart(TIMER0_CHANNEL);
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	0e 94 64 07 	call	0xec8	; 0xec8 <M_Timer_Void_PWMStart>
	A_Main_LCDPWMDrawer(Local_U8_DutyCycle, NUM_OF_WAVES);
    2424:	c8 01       	movw	r24, r16
    2426:	b7 01       	movw	r22, r14
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	62 e0       	ldi	r22, 0x02	; 2
    2432:	0e 94 93 10 	call	0x2126	; 0x2126 <A_Main_LCDPWMDrawer>
	M_DIO_Void_SetPinValue(PA1_PIN, LOW);
    2436:	8b e0       	ldi	r24, 0x0B	; 11
    2438:	60 e0       	ldi	r22, 0x00	; 0
    243a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <M_DIO_Void_SetPinValue>
}
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	1f 91       	pop	r17
    2444:	0f 91       	pop	r16
    2446:	ff 90       	pop	r15
    2448:	ef 90       	pop	r14
    244a:	08 95       	ret

0000244c <A_Main_void_ExternalMicro>:
	A_Main_LCDPWMDrawer(Local_U8_DutyCycle, NUM_OF_WAVES);
	M_DIO_Void_SetPinValue(PA2_PIN, LOW);
}
//SECOND MODE
void A_Main_void_ExternalMicro()
{
    244c:	0f 93       	push	r16
    244e:	1f 93       	push	r17
	u8 Local_U8_ExtMCDutyCycle = 0;
	u8 Local_U8_NeededNumOfWaves = 0;
	M_UART_Void_UARTSend(1);
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <M_UART_Void_UARTSend>
	Local_U8_ExtMCDutyCycle = M_UART_Void_UARTRec();
    2456:	0e 94 df 06 	call	0xdbe	; 0xdbe <M_UART_Void_UARTRec>
    245a:	08 2f       	mov	r16, r24
    245c:	28 eb       	ldi	r18, 0xB8	; 184
    245e:	3b e0       	ldi	r19, 0x0B	; 11
    2460:	40 e9       	ldi	r20, 0x90	; 144
    2462:	51 e0       	ldi	r21, 0x01	; 1
    2464:	ca 01       	movw	r24, r20
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	f1 f7       	brne	.-4      	; 0x2466 <A_Main_void_ExternalMicro+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246a:	21 50       	subi	r18, 0x01	; 1
    246c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246e:	d1 f7       	brne	.-12     	; 0x2464 <A_Main_void_ExternalMicro+0x18>
	_delay_ms(300);
	M_UART_Void_UARTSend(2);
    2470:	82 e0       	ldi	r24, 0x02	; 2
    2472:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <M_UART_Void_UARTSend>
	Local_U8_NeededNumOfWaves = M_UART_Void_UARTRec();
    2476:	0e 94 df 06 	call	0xdbe	; 0xdbe <M_UART_Void_UARTRec>
    247a:	18 2f       	mov	r17, r24
	H_Lcd_Void_LCDClear();
    247c:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDWriteString("No. of waves:");
    2480:	81 ed       	ldi	r24, 0xD1	; 209
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDWriteNumber(Local_U8_NeededNumOfWaves);
    2488:	61 2f       	mov	r22, r17
    248a:	70 e0       	ldi	r23, 0x00	; 0
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <H_Lcd_Void_LCDWriteNumber>
    2494:	20 e2       	ldi	r18, 0x20	; 32
    2496:	3e e4       	ldi	r19, 0x4E	; 78
    2498:	40 e9       	ldi	r20, 0x90	; 144
    249a:	51 e0       	ldi	r21, 0x01	; 1
    249c:	ca 01       	movw	r24, r20
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <A_Main_void_ExternalMicro+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a2:	21 50       	subi	r18, 0x01	; 1
    24a4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a6:	d1 f7       	brne	.-12     	; 0x249c <A_Main_void_ExternalMicro+0x50>
	_delay_ms(2000);
	A_Main_LCDPWMDrawer(Local_U8_ExtMCDutyCycle, Local_U8_NeededNumOfWaves);
    24a8:	80 2f       	mov	r24, r16
    24aa:	61 2f       	mov	r22, r17
    24ac:	0e 94 93 10 	call	0x2126	; 0x2126 <A_Main_LCDPWMDrawer>
	M_UART_Void_UARTSend(3);
    24b0:	83 e0       	ldi	r24, 0x03	; 3
    24b2:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <M_UART_Void_UARTSend>
}
    24b6:	1f 91       	pop	r17
    24b8:	0f 91       	pop	r16
    24ba:	08 95       	ret

000024bc <main>:
void A_Main_Timer0Execution(void);*/


/* MASTER */
int main()
{
    24bc:	2f 92       	push	r2
    24be:	3f 92       	push	r3
    24c0:	4f 92       	push	r4
    24c2:	5f 92       	push	r5
    24c4:	6f 92       	push	r6
    24c6:	7f 92       	push	r7
    24c8:	8f 92       	push	r8
    24ca:	9f 92       	push	r9
    24cc:	af 92       	push	r10
    24ce:	bf 92       	push	r11
    24d0:	cf 92       	push	r12
    24d2:	df 92       	push	r13
    24d4:	ef 92       	push	r14
    24d6:	ff 92       	push	r15
    24d8:	0f 93       	push	r16
    24da:	1f 93       	push	r17
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
	M_Timer_Void_PWMInit(TIMER0_CHANNEL);
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	0e 94 6f 07 	call	0xede	; 0xede <M_Timer_Void_PWMInit>
	M_UART_Void_UARTInit();
    24e6:	0e 94 c8 06 	call	0xd90	; 0xd90 <M_UART_Void_UARTInit>
	M_ADC_Void_ADCInit();
    24ea:	0e 94 2a 0b 	call	0x1654	; 0x1654 <M_ADC_Void_ADCInit>
	H_Lcd_Void_LCDInit();
    24ee:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <H_Lcd_Void_LCDInit>
	H_KeyPad_Void_KeyPadInit();
    24f2:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <H_KeyPad_Void_KeyPadInit>
	M_DIO_Void_SetPinDirection(PA1_PIN, OUTPUT);
    24f6:	8b e0       	ldi	r24, 0x0B	; 11
    24f8:	61 e0       	ldi	r22, 0x01	; 1
    24fa:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PA2_PIN, OUTPUT);
    24fe:	8c e0       	ldi	r24, 0x0C	; 12
    2500:	61 e0       	ldi	r22, 0x01	; 1
    2502:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PC7_PIN, OUTPUT);
    2506:	85 e2       	ldi	r24, 0x25	; 37
    2508:	61 e0       	ldi	r22, 0x01	; 1
    250a:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PD2_PIN, INPUT);
    250e:	8a e2       	ldi	r24, 0x2A	; 42
    2510:	60 e0       	ldi	r22, 0x00	; 0
    2512:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <M_DIO_Void_SetPinDirection>
    2516:	ee 24       	eor	r14, r14
    2518:	ff 24       	eor	r15, r15
    251a:	87 01       	movw	r16, r14
	{
		Local_U8_UserMode = 0;
		H_Lcd_Void_LCDClear();
		if(Local_U32_NumOfUsers == 0)
		{
			H_Lcd_Void_LCDWriteString("Welcome");
    251c:	0f 2e       	mov	r0, r31
    251e:	ff ed       	ldi	r31, 0xDF	; 223
    2520:	4f 2e       	mov	r4, r31
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	5f 2e       	mov	r5, r31
    2526:	f0 2d       	mov	r31, r0
    2528:	0f 2e       	mov	r0, r31
    252a:	f0 e2       	ldi	r31, 0x20	; 32
    252c:	cf 2e       	mov	r12, r31
    252e:	fe e4       	ldi	r31, 0x4E	; 78
    2530:	df 2e       	mov	r13, r31
    2532:	f0 2d       	mov	r31, r0
    2534:	c0 e9       	ldi	r28, 0x90	; 144
    2536:	d1 e0       	ldi	r29, 0x01	; 1
			_delay_ms(2000);
			H_Lcd_Void_LCDClear();
		}
		H_Lcd_Void_LCDWriteString("Choose the mode");
    2538:	0f 2e       	mov	r0, r31
    253a:	f7 ee       	ldi	r31, 0xE7	; 231
    253c:	af 2e       	mov	r10, r31
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	bf 2e       	mov	r11, r31
    2542:	f0 2d       	mov	r31, r0
		_delay_ms(2000);
		H_Lcd_Void_LCDClear();
		H_Lcd_Void_LCDWriteString("1-My-MC  2-Ex-MC");
    2544:	0f 2e       	mov	r0, r31
    2546:	f7 ef       	ldi	r31, 0xF7	; 247
    2548:	8f 2e       	mov	r8, r31
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	9f 2e       	mov	r9, r31
    254e:	f0 2d       	mov	r31, r0
		H_Lcd_Void_LCDGoTo(1, 0);
		H_Lcd_Void_LCDWriteString("3-Poten 4-Keypad");
    2550:	0f 2e       	mov	r0, r31
    2552:	f8 e0       	ldi	r31, 0x08	; 8
    2554:	6f 2e       	mov	r6, r31
    2556:	f1 e0       	ldi	r31, 0x01	; 1
    2558:	7f 2e       	mov	r7, r31
    255a:	f0 2d       	mov	r31, r0
				++Local_U32_NumOfUsers;
				break;
		default:
			H_Lcd_Void_LCDClear();
			H_Lcd_Void_LCDGoTo(0, 6);
			H_Lcd_Void_LCDWriteString("Invalid");
    255c:	0f 2e       	mov	r0, r31
    255e:	f9 e1       	ldi	r31, 0x19	; 25
    2560:	2f 2e       	mov	r2, r31
    2562:	f1 e0       	ldi	r31, 0x01	; 1
    2564:	3f 2e       	mov	r3, r31
    2566:	f0 2d       	mov	r31, r0
	u8 Local_U8_UserMode;
	u8 Local_U8_DutyCycle = 40;
	while(1)
	{
		Local_U8_UserMode = 0;
		H_Lcd_Void_LCDClear();
    2568:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <H_Lcd_Void_LCDClear>
		if(Local_U32_NumOfUsers == 0)
    256c:	e1 14       	cp	r14, r1
    256e:	f1 04       	cpc	r15, r1
    2570:	01 05       	cpc	r16, r1
    2572:	11 05       	cpc	r17, r1
    2574:	61 f4       	brne	.+24     	; 0x258e <main+0xd2>
		{
			H_Lcd_Void_LCDWriteString("Welcome");
    2576:	c2 01       	movw	r24, r4
    2578:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <H_Lcd_Void_LCDWriteString>
    257c:	96 01       	movw	r18, r12
    257e:	ce 01       	movw	r24, r28
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <main+0xc4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2584:	21 50       	subi	r18, 0x01	; 1
    2586:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2588:	d1 f7       	brne	.-12     	; 0x257e <main+0xc2>
			_delay_ms(2000);
			H_Lcd_Void_LCDClear();
    258a:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <H_Lcd_Void_LCDClear>
		}
		H_Lcd_Void_LCDWriteString("Choose the mode");
    258e:	c5 01       	movw	r24, r10
    2590:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <H_Lcd_Void_LCDWriteString>
    2594:	96 01       	movw	r18, r12
    2596:	ce 01       	movw	r24, r28
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	f1 f7       	brne	.-4      	; 0x2598 <main+0xdc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259c:	21 50       	subi	r18, 0x01	; 1
    259e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a0:	d1 f7       	brne	.-12     	; 0x2596 <main+0xda>
		_delay_ms(2000);
		H_Lcd_Void_LCDClear();
    25a2:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <H_Lcd_Void_LCDClear>
		H_Lcd_Void_LCDWriteString("1-My-MC  2-Ex-MC");
    25a6:	c4 01       	movw	r24, r8
    25a8:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(1, 0);
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	60 e0       	ldi	r22, 0x00	; 0
    25b0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString("3-Poten 4-Keypad");
    25b4:	c3 01       	movw	r24, r6
    25b6:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <H_Lcd_Void_LCDWriteString>
		while(!(Local_U8_UserMode = H_KeyPad_U8_KeyPadRead() - 48));
    25ba:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <H_KeyPad_U8_KeyPadRead>
    25be:	80 53       	subi	r24, 0x30	; 48
    25c0:	e1 f3       	breq	.-8      	; 0x25ba <main+0xfe>
		switch(Local_U8_UserMode)
    25c2:	82 30       	cpi	r24, 0x02	; 2
    25c4:	91 f0       	breq	.+36     	; 0x25ea <main+0x12e>
    25c6:	83 30       	cpi	r24, 0x03	; 3
    25c8:	18 f4       	brcc	.+6      	; 0x25d0 <main+0x114>
    25ca:	81 30       	cpi	r24, 0x01	; 1
    25cc:	31 f5       	brne	.+76     	; 0x261a <main+0x15e>
    25ce:	05 c0       	rjmp	.+10     	; 0x25da <main+0x11e>
    25d0:	83 30       	cpi	r24, 0x03	; 3
    25d2:	99 f0       	breq	.+38     	; 0x25fa <main+0x13e>
    25d4:	84 30       	cpi	r24, 0x04	; 4
    25d6:	09 f5       	brne	.+66     	; 0x261a <main+0x15e>
    25d8:	18 c0       	rjmp	.+48     	; 0x260a <main+0x14e>
		{
		case(1):
				A_Main_void_MineMicro();
    25da:	0e 94 bb 11 	call	0x2376	; 0x2376 <A_Main_void_MineMicro>
				++Local_U32_NumOfUsers;
    25de:	08 94       	sec
    25e0:	e1 1c       	adc	r14, r1
    25e2:	f1 1c       	adc	r15, r1
    25e4:	01 1d       	adc	r16, r1
    25e6:	11 1d       	adc	r17, r1
    25e8:	bf cf       	rjmp	.-130    	; 0x2568 <main+0xac>
				break;
		case(2):
				A_Main_void_ExternalMicro();
    25ea:	0e 94 26 12 	call	0x244c	; 0x244c <A_Main_void_ExternalMicro>
				++Local_U32_NumOfUsers;
    25ee:	08 94       	sec
    25f0:	e1 1c       	adc	r14, r1
    25f2:	f1 1c       	adc	r15, r1
    25f4:	01 1d       	adc	r16, r1
    25f6:	11 1d       	adc	r17, r1
    25f8:	b7 cf       	rjmp	.-146    	; 0x2568 <main+0xac>
				break;
		case(3):
				A_Main_void_PoteniAsSource();
    25fa:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <A_Main_void_PoteniAsSource>
				++Local_U32_NumOfUsers;
    25fe:	08 94       	sec
    2600:	e1 1c       	adc	r14, r1
    2602:	f1 1c       	adc	r15, r1
    2604:	01 1d       	adc	r16, r1
    2606:	11 1d       	adc	r17, r1
    2608:	af cf       	rjmp	.-162    	; 0x2568 <main+0xac>
				break;
		case(4):
				A_Main_void_KeypadAsSource();
    260a:	0e 94 54 11 	call	0x22a8	; 0x22a8 <A_Main_void_KeypadAsSource>
				++Local_U32_NumOfUsers;
    260e:	08 94       	sec
    2610:	e1 1c       	adc	r14, r1
    2612:	f1 1c       	adc	r15, r1
    2614:	01 1d       	adc	r16, r1
    2616:	11 1d       	adc	r17, r1
    2618:	a7 cf       	rjmp	.-178    	; 0x2568 <main+0xac>
				break;
		default:
			H_Lcd_Void_LCDClear();
    261a:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <H_Lcd_Void_LCDClear>
			H_Lcd_Void_LCDGoTo(0, 6);
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	66 e0       	ldi	r22, 0x06	; 6
    2622:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString("Invalid");
    2626:	c1 01       	movw	r24, r2
    2628:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <H_Lcd_Void_LCDWriteString>
    262c:	20 e1       	ldi	r18, 0x10	; 16
    262e:	37 e2       	ldi	r19, 0x27	; 39
    2630:	ce 01       	movw	r24, r28
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	f1 f7       	brne	.-4      	; 0x2632 <main+0x176>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2636:	21 50       	subi	r18, 0x01	; 1
    2638:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263a:	d1 f7       	brne	.-12     	; 0x2630 <main+0x174>
    263c:	95 cf       	rjmp	.-214    	; 0x2568 <main+0xac>

0000263e <__mulsi3>:
    263e:	62 9f       	mul	r22, r18
    2640:	d0 01       	movw	r26, r0
    2642:	73 9f       	mul	r23, r19
    2644:	f0 01       	movw	r30, r0
    2646:	82 9f       	mul	r24, r18
    2648:	e0 0d       	add	r30, r0
    264a:	f1 1d       	adc	r31, r1
    264c:	64 9f       	mul	r22, r20
    264e:	e0 0d       	add	r30, r0
    2650:	f1 1d       	adc	r31, r1
    2652:	92 9f       	mul	r25, r18
    2654:	f0 0d       	add	r31, r0
    2656:	83 9f       	mul	r24, r19
    2658:	f0 0d       	add	r31, r0
    265a:	74 9f       	mul	r23, r20
    265c:	f0 0d       	add	r31, r0
    265e:	65 9f       	mul	r22, r21
    2660:	f0 0d       	add	r31, r0
    2662:	99 27       	eor	r25, r25
    2664:	72 9f       	mul	r23, r18
    2666:	b0 0d       	add	r27, r0
    2668:	e1 1d       	adc	r30, r1
    266a:	f9 1f       	adc	r31, r25
    266c:	63 9f       	mul	r22, r19
    266e:	b0 0d       	add	r27, r0
    2670:	e1 1d       	adc	r30, r1
    2672:	f9 1f       	adc	r31, r25
    2674:	bd 01       	movw	r22, r26
    2676:	cf 01       	movw	r24, r30
    2678:	11 24       	eor	r1, r1
    267a:	08 95       	ret

0000267c <__udivmodqi4>:
    267c:	99 1b       	sub	r25, r25
    267e:	79 e0       	ldi	r23, 0x09	; 9
    2680:	04 c0       	rjmp	.+8      	; 0x268a <__udivmodqi4_ep>

00002682 <__udivmodqi4_loop>:
    2682:	99 1f       	adc	r25, r25
    2684:	96 17       	cp	r25, r22
    2686:	08 f0       	brcs	.+2      	; 0x268a <__udivmodqi4_ep>
    2688:	96 1b       	sub	r25, r22

0000268a <__udivmodqi4_ep>:
    268a:	88 1f       	adc	r24, r24
    268c:	7a 95       	dec	r23
    268e:	c9 f7       	brne	.-14     	; 0x2682 <__udivmodqi4_loop>
    2690:	80 95       	com	r24
    2692:	08 95       	ret

00002694 <__divmodhi4>:
    2694:	97 fb       	bst	r25, 7
    2696:	09 2e       	mov	r0, r25
    2698:	07 26       	eor	r0, r23
    269a:	0a d0       	rcall	.+20     	; 0x26b0 <__divmodhi4_neg1>
    269c:	77 fd       	sbrc	r23, 7
    269e:	04 d0       	rcall	.+8      	; 0x26a8 <__divmodhi4_neg2>
    26a0:	49 d0       	rcall	.+146    	; 0x2734 <__udivmodhi4>
    26a2:	06 d0       	rcall	.+12     	; 0x26b0 <__divmodhi4_neg1>
    26a4:	00 20       	and	r0, r0
    26a6:	1a f4       	brpl	.+6      	; 0x26ae <__divmodhi4_exit>

000026a8 <__divmodhi4_neg2>:
    26a8:	70 95       	com	r23
    26aa:	61 95       	neg	r22
    26ac:	7f 4f       	sbci	r23, 0xFF	; 255

000026ae <__divmodhi4_exit>:
    26ae:	08 95       	ret

000026b0 <__divmodhi4_neg1>:
    26b0:	f6 f7       	brtc	.-4      	; 0x26ae <__divmodhi4_exit>
    26b2:	90 95       	com	r25
    26b4:	81 95       	neg	r24
    26b6:	9f 4f       	sbci	r25, 0xFF	; 255
    26b8:	08 95       	ret

000026ba <__udivmodsi4>:
    26ba:	a1 e2       	ldi	r26, 0x21	; 33
    26bc:	1a 2e       	mov	r1, r26
    26be:	aa 1b       	sub	r26, r26
    26c0:	bb 1b       	sub	r27, r27
    26c2:	fd 01       	movw	r30, r26
    26c4:	0d c0       	rjmp	.+26     	; 0x26e0 <__udivmodsi4_ep>

000026c6 <__udivmodsi4_loop>:
    26c6:	aa 1f       	adc	r26, r26
    26c8:	bb 1f       	adc	r27, r27
    26ca:	ee 1f       	adc	r30, r30
    26cc:	ff 1f       	adc	r31, r31
    26ce:	a2 17       	cp	r26, r18
    26d0:	b3 07       	cpc	r27, r19
    26d2:	e4 07       	cpc	r30, r20
    26d4:	f5 07       	cpc	r31, r21
    26d6:	20 f0       	brcs	.+8      	; 0x26e0 <__udivmodsi4_ep>
    26d8:	a2 1b       	sub	r26, r18
    26da:	b3 0b       	sbc	r27, r19
    26dc:	e4 0b       	sbc	r30, r20
    26de:	f5 0b       	sbc	r31, r21

000026e0 <__udivmodsi4_ep>:
    26e0:	66 1f       	adc	r22, r22
    26e2:	77 1f       	adc	r23, r23
    26e4:	88 1f       	adc	r24, r24
    26e6:	99 1f       	adc	r25, r25
    26e8:	1a 94       	dec	r1
    26ea:	69 f7       	brne	.-38     	; 0x26c6 <__udivmodsi4_loop>
    26ec:	60 95       	com	r22
    26ee:	70 95       	com	r23
    26f0:	80 95       	com	r24
    26f2:	90 95       	com	r25
    26f4:	9b 01       	movw	r18, r22
    26f6:	ac 01       	movw	r20, r24
    26f8:	bd 01       	movw	r22, r26
    26fa:	cf 01       	movw	r24, r30
    26fc:	08 95       	ret

000026fe <__divmodsi4>:
    26fe:	97 fb       	bst	r25, 7
    2700:	09 2e       	mov	r0, r25
    2702:	05 26       	eor	r0, r21
    2704:	0e d0       	rcall	.+28     	; 0x2722 <__divmodsi4_neg1>
    2706:	57 fd       	sbrc	r21, 7
    2708:	04 d0       	rcall	.+8      	; 0x2712 <__divmodsi4_neg2>
    270a:	d7 df       	rcall	.-82     	; 0x26ba <__udivmodsi4>
    270c:	0a d0       	rcall	.+20     	; 0x2722 <__divmodsi4_neg1>
    270e:	00 1c       	adc	r0, r0
    2710:	38 f4       	brcc	.+14     	; 0x2720 <__divmodsi4_exit>

00002712 <__divmodsi4_neg2>:
    2712:	50 95       	com	r21
    2714:	40 95       	com	r20
    2716:	30 95       	com	r19
    2718:	21 95       	neg	r18
    271a:	3f 4f       	sbci	r19, 0xFF	; 255
    271c:	4f 4f       	sbci	r20, 0xFF	; 255
    271e:	5f 4f       	sbci	r21, 0xFF	; 255

00002720 <__divmodsi4_exit>:
    2720:	08 95       	ret

00002722 <__divmodsi4_neg1>:
    2722:	f6 f7       	brtc	.-4      	; 0x2720 <__divmodsi4_exit>
    2724:	90 95       	com	r25
    2726:	80 95       	com	r24
    2728:	70 95       	com	r23
    272a:	61 95       	neg	r22
    272c:	7f 4f       	sbci	r23, 0xFF	; 255
    272e:	8f 4f       	sbci	r24, 0xFF	; 255
    2730:	9f 4f       	sbci	r25, 0xFF	; 255
    2732:	08 95       	ret

00002734 <__udivmodhi4>:
    2734:	aa 1b       	sub	r26, r26
    2736:	bb 1b       	sub	r27, r27
    2738:	51 e1       	ldi	r21, 0x11	; 17
    273a:	07 c0       	rjmp	.+14     	; 0x274a <__udivmodhi4_ep>

0000273c <__udivmodhi4_loop>:
    273c:	aa 1f       	adc	r26, r26
    273e:	bb 1f       	adc	r27, r27
    2740:	a6 17       	cp	r26, r22
    2742:	b7 07       	cpc	r27, r23
    2744:	10 f0       	brcs	.+4      	; 0x274a <__udivmodhi4_ep>
    2746:	a6 1b       	sub	r26, r22
    2748:	b7 0b       	sbc	r27, r23

0000274a <__udivmodhi4_ep>:
    274a:	88 1f       	adc	r24, r24
    274c:	99 1f       	adc	r25, r25
    274e:	5a 95       	dec	r21
    2750:	a9 f7       	brne	.-22     	; 0x273c <__udivmodhi4_loop>
    2752:	80 95       	com	r24
    2754:	90 95       	com	r25
    2756:	bc 01       	movw	r22, r24
    2758:	cd 01       	movw	r24, r26
    275a:	08 95       	ret

0000275c <__prologue_saves__>:
    275c:	2f 92       	push	r2
    275e:	3f 92       	push	r3
    2760:	4f 92       	push	r4
    2762:	5f 92       	push	r5
    2764:	6f 92       	push	r6
    2766:	7f 92       	push	r7
    2768:	8f 92       	push	r8
    276a:	9f 92       	push	r9
    276c:	af 92       	push	r10
    276e:	bf 92       	push	r11
    2770:	cf 92       	push	r12
    2772:	df 92       	push	r13
    2774:	ef 92       	push	r14
    2776:	ff 92       	push	r15
    2778:	0f 93       	push	r16
    277a:	1f 93       	push	r17
    277c:	cf 93       	push	r28
    277e:	df 93       	push	r29
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	ca 1b       	sub	r28, r26
    2786:	db 0b       	sbc	r29, r27
    2788:	0f b6       	in	r0, 0x3f	; 63
    278a:	f8 94       	cli
    278c:	de bf       	out	0x3e, r29	; 62
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	cd bf       	out	0x3d, r28	; 61
    2792:	09 94       	ijmp

00002794 <__epilogue_restores__>:
    2794:	2a 88       	ldd	r2, Y+18	; 0x12
    2796:	39 88       	ldd	r3, Y+17	; 0x11
    2798:	48 88       	ldd	r4, Y+16	; 0x10
    279a:	5f 84       	ldd	r5, Y+15	; 0x0f
    279c:	6e 84       	ldd	r6, Y+14	; 0x0e
    279e:	7d 84       	ldd	r7, Y+13	; 0x0d
    27a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    27a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    27a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    27a6:	b9 84       	ldd	r11, Y+9	; 0x09
    27a8:	c8 84       	ldd	r12, Y+8	; 0x08
    27aa:	df 80       	ldd	r13, Y+7	; 0x07
    27ac:	ee 80       	ldd	r14, Y+6	; 0x06
    27ae:	fd 80       	ldd	r15, Y+5	; 0x05
    27b0:	0c 81       	ldd	r16, Y+4	; 0x04
    27b2:	1b 81       	ldd	r17, Y+3	; 0x03
    27b4:	aa 81       	ldd	r26, Y+2	; 0x02
    27b6:	b9 81       	ldd	r27, Y+1	; 0x01
    27b8:	ce 0f       	add	r28, r30
    27ba:	d1 1d       	adc	r29, r1
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	de bf       	out	0x3e, r29	; 62
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	cd bf       	out	0x3d, r28	; 61
    27c6:	ed 01       	movw	r28, r26
    27c8:	08 95       	ret

000027ca <_exit>:
    27ca:	f8 94       	cli

000027cc <__stop_program>:
    27cc:	ff cf       	rjmp	.-2      	; 0x27cc <__stop_program>
